# --- Build Stage ---
FROM golang:1.23-alpine AS builder
# Updated Go version to 1.23

# Install build dependencies if any (e.g., git for private modules)
# RUN apk add --no-cache git

WORKDIR /app

# Copy go module files from src directory relative to project root (build context)
COPY src/go.mod src/go.sum ./

# Download dependencies
RUN go mod download

# Copy the contents of the src directory and the asset directory
COPY src/ ./
COPY asset ./asset

# Build the application statically
# Output binary to /mc-iam-manager
RUN CGO_ENABLED=0 GOOS=linux go build -ldflags="-w -s" -o /mc-iam-manager ./main.go

# --- Runtime Stage ---
FROM alpine:latest

WORKDIR /app

# Copy the built binary from the builder stage
COPY --from=builder /mc-iam-manager /app/mc-iam-manager

# Copy necessary assets from the builder stage
COPY --from=builder /app/asset ./asset

# Copy .env file to the root directory inside the container, so "../.env" resolves from "/app"
COPY .env /.env

# Expose the application port (adjust if different)
EXPOSE 8082

# Command to run the application
# The application reads .env from the current directory (WORKDIR) if it exists
CMD ["./mc-iam-manager"]
