basePath: /api/v1
definitions:
  constants.AuthMethod:
    enum:
    - OIDC
    - SAML
    type: string
    x-enum-varnames:
    - AuthMethodOIDC
    - AuthMethodSAML
  constants.CSPType:
    enum:
    - aws
    - gcp
    - azure
    type: string
    x-enum-varnames:
    - CSPTypeAWS
    - CSPTypeGCP
    - CSPTypeAzure
  constants.IAMRoleType:
    enum:
    - platform
    - workspace
    - csp
    type: string
    x-enum-comments:
      RoleTypeCSP: CSP 역할
      RoleTypePlatform: 플랫폼 역할
      RoleTypeWorkspace: 워크스페이스 역할
    x-enum-varnames:
    - RoleTypePlatform
    - RoleTypeWorkspace
    - RoleTypeCSP
  idp.UserLogin:
    properties:
      id:
        type: string
      password:
        type: string
    type: object
  mcmpapi.McmpApiAction:
    properties:
      actionName:
        type: string
      createdAt:
        type: string
      description:
        type: string
      id:
        description: Auto-incrementing primary key
        type: integer
      method:
        type: string
      resourcePath:
        type: string
      serviceName:
        description: Foreign key reference (indexed)
        type: string
      updatedAt:
        type: string
    type: object
  mcmpapi.McmpApiAuthInfo:
    properties:
      password:
        type: string
      type:
        type: string
      username:
        type: string
    type: object
  mcmpapi.McmpApiDefinitions:
    properties:
      serviceActions:
        additionalProperties:
          additionalProperties:
            $ref: '#/definitions/mcmpapi.McmpApiServiceAction'
          type: object
        description: Use renamed ServiceAction
        type: object
      services:
        additionalProperties:
          $ref: '#/definitions/mcmpapi.McmpApiServiceDefinition'
        description: Use renamed ServiceDefinition
        type: object
    type: object
  mcmpapi.McmpApiPermissionActionMapping:
    properties:
      actionID:
        type: integer
      actionName:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      permissionID:
        type: string
      updatedAt:
        type: string
    type: object
  mcmpapi.McmpApiServiceAction:
    properties:
      description:
        type: string
      method:
        type: string
      resourcePath:
        type: string
    type: object
  mcmpapi.McmpApiServiceDefinition:
    properties:
      auth:
        allOf:
        - $ref: '#/definitions/mcmpapi.McmpApiAuthInfo'
        description: Use renamed AuthInfo
      baseURL:
        type: string
      version:
        type: string
    type: object
  model.AssignRoleRequest:
    properties:
      roleId:
        description: 역할 ID (문자열로 받음)
        type: string
      roleName:
        description: 역할명
        type: string
      roleType:
        description: 역할 타입 (platform/workspace)
        type: string
      userId:
        description: 사용자 ID (문자열로 받음)
        type: string
      username:
        description: 사용자명
        type: string
      workspaceId:
        description: 워크스페이스 ID (문자열로 받음)
        type: string
    type: object
  model.AssignWorkspaceRoleRequest:
    properties:
      roleId:
        description: 역할 ID (문자열로 받음)
        type: string
      roleName:
        description: 역할명
        type: string
      userId:
        description: 사용자 ID (문자열로 받음)
        type: string
      username:
        description: 사용자명
        type: string
      workspaceId:
        description: 워크스페이스 ID (문자열로 받음)
        type: string
    type: object
  model.CreateCspRoleRequest:
    properties:
      cspRoleName:
        description: csp의 RoleName. 여러 role이 있기때문에 csp에 정의한 role로 구분하기 위해 사용
        type: string
      cspType:
        type: string
      description:
        type: string
      iamIdentifier:
        type: string
      iamRoleId:
        type: string
      id:
        type: string
      idpIdentifier:
        type: string
      path:
        type: string
      status:
        type: string
      tags:
        items:
          $ref: '#/definitions/model.Tag'
        type: array
    type: object
  model.CreateCspRolesRequest:
    properties:
      cspRoles:
        items:
          $ref: '#/definitions/model.CreateCspRoleRequest'
        type: array
    required:
    - cspRoles
    type: object
  model.CreateMenuMappingRequest:
    properties:
      menuIds:
        items:
          type: string
        type: array
      roleId:
        type: string
    required:
    - menuIds
    - roleId
    type: object
  model.CreateRoleRequest:
    properties:
      cspRoles:
        items:
          $ref: '#/definitions/model.CreateCspRoleRequest'
        type: array
      description:
        type: string
      menuIds:
        items:
          type: string
        type: array
      name:
        type: string
      parentId:
        type: integer
      roleTypes:
        description: RoleTypes   []constants.IAMRoleType `json:"roleTypes" validate:"required,dive,oneof=platform
          workspace csp"`
        items:
          $ref: '#/definitions/constants.IAMRoleType'
        type: array
    required:
    - name
    type: object
  model.CspRole:
    properties:
      create_date:
        type: string
      created_at:
        type: string
      csp_type:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      iam_identifier:
        type: string
      iam_role_id:
        type: string
      id:
        type: integer
      idp_identifier:
        type: string
      max_session_duration:
        type: integer
      name:
        type: string
      path:
        type: string
      permissions:
        items:
          type: string
        type: array
      permissions_boundary:
        type: string
      role_last_used:
        $ref: '#/definitions/model.RoleLastUsed'
      status:
        type: string
      tags:
        items:
          $ref: '#/definitions/model.Tag'
        type: array
      updated_at:
        type: string
    type: object
  model.FilterRoleMasterMappingRequest:
    properties:
      authMethod:
        type: string
      cspRoleId:
        type: string
      cspRoleName:
        type: string
      cspType:
        type: string
      projectId:
        type: string
      projectName:
        type: string
      roleId:
        type: string
      roleTypes:
        items:
          $ref: '#/definitions/constants.IAMRoleType'
        type: array
      userId:
        type: string
      username:
        type: string
      workspaceId:
        type: string
      workspaceName:
        type: string
    type: object
  model.MciamPermission:
    properties:
      action:
        description: e.g., create, read, update, delete
        type: string
      createdAt:
        description: Match DB schema
        type: string
      description:
        type: string
      frameworkId:
        description: FK to mcmp_resource_types.framework_id
        type: string
      id:
        description: 'Format: <framework_id>:<resource_type_id>:<action>'
        type: string
      name:
        type: string
      resourceTypeId:
        description: FK to mcmp_resource_types.id
        type: string
      updatedAt:
        description: Match DB schema
        type: string
    type: object
  model.McmpApiCallRequest:
    properties:
      actionName:
        description: Target action name (operationId)
        type: string
      requestParams:
        allOf:
        - $ref: '#/definitions/model.McmpApiRequestParams'
        description: Parameters for the external API call
      serviceName:
        description: Target service name
        type: string
    required:
    - actionName
    - serviceName
    type: object
  model.McmpApiRequestParams:
    properties:
      body:
        description: Request body (accept any JSON structure) - Changed from json.RawMessage
          for swag compatibility
      pathParams:
        additionalProperties:
          type: string
        description: Parameters to replace in the resource path (e.g., {userId})
        type: object
      queryParams:
        additionalProperties:
          type: string
        description: Parameters to append as query string (?key=value)
        type: object
    type: object
  model.Menu:
    properties:
      displayName:
        type: string
      id:
        type: string
      isAction:
        type: boolean
      menuNumber:
        type: integer
      parentId:
        type: string
      priority:
        type: integer
      resType:
        type: string
    type: object
  model.MenuTreeNode:
    properties:
      children:
        description: Slice of pointers to child nodes
        items:
          $ref: '#/definitions/model.MenuTreeNode'
        type: array
      displayName:
        type: string
      id:
        type: string
      isAction:
        type: boolean
      menuNumber:
        type: integer
      parentId:
        type: string
      priority:
        type: integer
      resType:
        type: string
    type: object
  model.Project:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      nsid:
        description: Namespace ID
        type: string
      updated_at:
        type: string
      workspaces:
        description: M:N relationship
        items:
          $ref: '#/definitions/model.Workspace'
        type: array
    type: object
  model.ResourceType:
    properties:
      createdAt:
        type: string
      description:
        type: string
      frameworkId:
        description: Identifier of the framework (e.g., "mc-iam-manager", "mc-infra-manager")
        type: string
      id:
        description: Unique identifier within the framework (e.g., "workspace", "vm")
        type: string
      name:
        description: Display name (e.g., "Workspace", "Virtual Machine")
        type: string
      updatedAt:
        type: string
    type: object
  model.Response:
    properties:
      error:
        type: boolean
      message:
        type: string
    type: object
  model.RoleLastUsed:
    properties:
      last_used_date:
        type: string
      region:
        type: string
    type: object
  model.RoleMaster:
    properties:
      children:
        items:
          $ref: '#/definitions/model.RoleMaster'
        type: array
      created_at:
        type: string
      csp_role_mappings:
        items:
          $ref: '#/definitions/model.RoleMasterCspRoleMapping'
        type: array
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      parent:
        $ref: '#/definitions/model.RoleMaster'
      parent_id:
        type: integer
      predefined:
        type: boolean
      role_subs:
        items:
          $ref: '#/definitions/model.RoleSub'
        type: array
      updated_at:
        type: string
    type: object
  model.RoleMasterCspRoleMapping:
    properties:
      auth_method:
        $ref: '#/definitions/constants.AuthMethod'
      createdAt:
        type: string
      cspRoles:
        description: 서비스 레이어에서 조합
        items:
          $ref: '#/definitions/model.CspRole'
        type: array
      description:
        type: string
      roleId:
        type: integer
    type: object
  model.RoleMasterCspRoleMappingRequest:
    properties:
      authMethod:
        $ref: '#/definitions/constants.AuthMethod'
      cspRoleId:
        type: string
      cspType:
        $ref: '#/definitions/constants.CSPType'
      description:
        type: string
      roleId:
        type: string
    type: object
  model.RoleMasterMapping:
    properties:
      role_id:
        type: integer
      role_master_csp_role_mappings:
        items:
          $ref: '#/definitions/model.RoleMasterCspRoleMapping'
        type: array
      role_name:
        type: string
      user_platform_roles:
        items:
          $ref: '#/definitions/model.UserPlatformRole'
        type: array
      user_workspace_roles:
        items:
          $ref: '#/definitions/model.UserWorkspaceRole'
        type: array
    type: object
  model.RoleSub:
    properties:
      created_at:
        type: string
      id:
        type: integer
      role_id:
        type: integer
      role_type:
        $ref: '#/definitions/constants.IAMRoleType'
      updated_at:
        type: string
    type: object
  model.SetupInitialAdminRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  model.Tag:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  model.User:
    properties:
      created_at:
        type: string
      description:
        type: string
      email:
        description: Ignore Email for DB
        type: string
      enabled:
        description: Enabled status managed by Keycloak
        type: boolean
      firstName:
        description: Ignore FirstName for DB
        type: string
      id:
        description: DB에 저장되는 정보 (mcmp_users 테이블)
        type: integer
      kc_id:
        description: Keycloak User ID
        type: string
      lastName:
        description: Ignore LastName for DB
        type: string
      platform_roles:
        description: 관계 정의
        items:
          $ref: '#/definitions/model.RoleMaster'
        type: array
      updated_at:
        type: string
      username:
        description: Keycloak 정보
        type: string
      workspace_roles:
        items:
          $ref: '#/definitions/model.RoleMaster'
        type: array
    type: object
  model.UserPlatformRole:
    properties:
      created_at:
        type: string
      role_id:
        type: integer
      user_id:
        type: integer
      username:
        description: 사용자 정보 (JOIN으로 가져올 필드들)
        type: string
    type: object
  model.UserStatusRequest:
    properties:
      id:
        description: DB에 저장되는 정보 (mcmp_users 테이블)
        type: string
      kc_id:
        description: Keycloak User ID
        type: string
      status:
        description: 사용자 상태
        type: string
    type: object
  model.UserWorkspaceRole:
    properties:
      created_at:
        type: string
      role:
        $ref: '#/definitions/model.RoleMaster'
      role_id:
        type: integer
      role_name:
        type: string
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: integer
      username:
        type: string
      workspace:
        $ref: '#/definitions/model.Workspace'
      workspace_id:
        type: integer
      workspace_name:
        type: string
    type: object
  model.Workspace:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      projects:
        items:
          $ref: '#/definitions/model.Project'
        type: array
      updated_at:
        type: string
    type: object
  model.WorkspaceWithUsersAndRoles:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
      users:
        items:
          $ref: '#/definitions/model.UserWorkspaceRole'
        type: array
    type: object
host: localhost:3000
info:
  contact: {}
  description: MC IAM Manager API Documentation
  title: MC IAM Manager API
  version: "1.0"
paths:
  /api/auth/certs:
    get:
      consumes:
      - application/json
      description: Retrieve authentication certificates for MC-IAM-Manager to be used
        in target frameworks for token validation.
      operationId: mciamAuthCerts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get authentication certificates
      tags:
      - auth
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and issue JWT token.
      operationId: mciamLogin
      parameters:
      - description: Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/idp.UserLogin'
      produces:
      - application/json
      responses: {}
      summary: User login
      tags:
      - auth
  /api/auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate the user's refresh token and log out.
      operationId: mciamLogout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Logout user
      tags:
      - auth
  /api/auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh JWT access token using a valid refresh token.
      operationId: mciamRefreshToken
      produces:
      - application/json
      responses: {}
      summary: Refresh access token
      tags:
      - auth
  /api/auth/temp-credential-csps:
    get:
      consumes:
      - application/json
      description: Get temporary credential provider information for AWS and GCP
      operationId: mciamGetTempCredentialProviders
      produces:
      - application/json
      responses:
        "200":
          description: CSP temporary credential information
          schema:
            additionalProperties: true
            type: object
      summary: Get temporary credential CSP information
      tags:
      - auth
  /api/csp-credentials:
    get:
      consumes:
      - application/json
      description: 모든 CSP 인증 정보 목록을 조회합니다
      operationId: mciamListCredentials
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: CSP 인증 정보 목록 조회
      tags:
      - csp-credentials
    post:
      consumes:
      - application/json
      description: 새로운 CSP 인증 정보를 생성합니다
      operationId: mciamCreateCredential
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: 새 CSP 인증 정보 생성
      tags:
      - csp-credentials
  /api/csp-credentials/{id}:
    delete:
      consumes:
      - application/json
      description: CSP 인증 정보를 삭제합니다
      operationId: mciamDeleteCredential
      parameters:
      - description: Credential ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'error: Forbidden'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Credential not found'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: CSP 인증 정보 삭제
      tags:
      - csp-credentials
    get:
      consumes:
      - application/json
      description: 특정 CSP 인증 정보를 ID로 조회합니다
      operationId: mciamGetCredentialByID
      parameters:
      - description: Credential ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "404":
          description: 'error: Credential not found'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: CSP 인증 정보 ID로 조회
      tags:
      - csp-credentials
    put:
      consumes:
      - application/json
      description: CSP 인증 정보를 업데이트합니다
      operationId: mciamUpdateCredential
      parameters:
      - description: Credential ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "404":
          description: 'error: Credential not found'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: CSP 인증 정보 업데이트
      tags:
      - csp-credentials
  /api/initial-admin:
    post:
      consumes:
      - application/json
      description: Creates the initial platform admin user with necessary permissions.
        platform admin 생성인데
      operationId: setupInitialAdmin
      parameters:
      - description: Setup Initial Admin Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.SetupInitialAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Setup initial platform admin
      tags:
      - admin
  /api/mcmp-api-permission-action-mappings:
    post:
      consumes:
      - application/json
      description: Creates a new mapping between a permission and an API action
      operationId: createMcmpApiPermissionActionMapping
      parameters:
      - description: Mapping to create
        in: body
        name: mapping
        required: true
        schema:
          $ref: '#/definitions/mcmpapi.McmpApiPermissionActionMapping'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Create permission-action mapping
      tags:
      - mcmp-api-permission-action-mappings
  /api/mcmp-api-permission-action-mappings/actions/{actionId}/permissions:
    get:
      consumes:
      - application/json
      description: Returns all permissions mapped to a specific API action
      operationId: listPermissionsByActionID
      parameters:
      - description: Action ID
        in: path
        name: actionId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: Get permissions by action ID
      tags:
      - mcmp-api-permission-action-mappings
  /api/mcmp-api-permission-action-mappings/actions/list:
    post:
      consumes:
      - application/json
      description: Returns all workspace actions mapped to a specific permission
      operationId: listWorkspaceActionsByPermissionID
      parameters:
      - description: Permission ID
        in: path
        name: permissionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/mcmpapi.McmpApiAction'
            type: array
      summary: Get workspace actions by permission ID
      tags:
      - mcmp-api-permission-action-mappings
  /api/mcmp-api-permission-action-mappings/list:
    post:
      consumes:
      - application/json
      description: Returns all platform actions mapped to a specific permission
      operationId: listPlatformActions
      parameters:
      - description: Permission ID
        in: path
        name: permissionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/mcmpapi.McmpApiAction'
            type: array
      summary: List platform actions by permission ID
      tags:
      - mcmp-api-permission-action-mappings
  /api/mcmp-api-permission-action-mappings/permissions/{permissionId}/actions/{actionId}:
    delete:
      consumes:
      - application/json
      description: Deletes a mapping between a permission and an API action
      operationId: deleteMapping
      parameters:
      - description: Permission ID
        in: path
        name: permissionId
        required: true
        type: string
      - description: Action ID
        in: path
        name: actionId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete permission-action mapping
      tags:
      - mcmp-api-permission-action-mappings
    put:
      consumes:
      - application/json
      description: Updates an existing mapping between a permission and an API action
      operationId: updateMapping
      parameters:
      - description: Permission ID
        in: path
        name: permissionId
        required: true
        type: string
      - description: Action ID
        in: path
        name: actionId
        required: true
        type: integer
      - description: Updated mapping
        in: body
        name: mapping
        required: true
        schema:
          $ref: '#/definitions/mcmpapi.McmpApiPermissionActionMapping'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update permission-action mapping
      tags:
      - mcmp-api-permission-action-mappings
  /api/mcmp-api-permission-action-mappings/platforms/id/{permissionId}/actions:
    get:
      consumes:
      - application/json
      description: Returns all platform actions mapped to a specific permission
      operationId: getPlatformActionsByPermissionID
      parameters:
      - description: Permission ID
        in: path
        name: permissionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/mcmpapi.McmpApiAction'
            type: array
      summary: Get platform actions by permission ID
      tags:
      - mcmp-api-permission-action-mappings
  /api/mcmp-apis/list:
    post:
      consumes:
      - application/json
      description: Retrieves all MCMP API service and action definitions currently
        stored in the database.
      operationId: listServicesAndActions
      parameters:
      - description: Filter by service name
        in: query
        name: serviceName
        type: string
      - description: Filter by action name (operationId)
        in: query
        name: actionName
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved API definitions
          schema:
            $ref: '#/definitions/mcmpapi.McmpApiDefinitions'
        "500":
          description: 'message: Failed to retrieve API definitions'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get All Stored MCMP API Definitions
      tags:
      - McmpAPI
  /api/mcmp-apis/mcmpApiCall:
    post:
      consumes:
      - application/json
      description: Executes a defined MCMP API action with parameters structured in
        McmpApiCallRequest.
      operationId: mcmpApiCall
      parameters:
      - description: API Call Request
        in: body
        name: callRequest
        required: true
        schema:
          $ref: '#/definitions/model.McmpApiCallRequest'
      produces:
      - application/json
      responses:
        "200":
          description: External API Response (structure depends on the called API)
          schema:
            type: object
        "400":
          description: 'error: Invalid request body or parameters'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Service or action not found'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Internal server error or failed to call external API'
          schema:
            additionalProperties:
              type: string
            type: object
        "503":
          description: 'error: External API unavailable'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Call an external MCMP API action (Structured Request)
      tags:
      - McmpAPI
  /api/mcmp-apis/name/{serviceName}:
    put:
      consumes:
      - application/json
      description: Updates specific fields (e.g., BaseURL, Auth info) of an MCMP API
        service definition identified by its name. Cannot update name or version.
      operationId: UpdateFrameworkService
      parameters:
      - description: Service Name to update
        in: path
        name: serviceName
        required: true
        type: string
      - description: Fields to update (e.g., {\
        in: body
        name: updates
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Service updated successfully" // Or return updated
            service?'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error: Invalid service name or request body'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Service not found'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Failed to update service'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update MCMP API Service Definition
      tags:
      - McmpAPI
  /api/mcmp-apis/name/{serviceName}/versions/{version}/activate:
    put:
      consumes:
      - application/json
      description: Sets the specified version of an MCMP API service as the active
        one.
      operationId: setActiveVersion
      parameters:
      - description: Service Name
        in: path
        name: serviceName
        required: true
        type: string
      - description: Version to activate
        in: path
        name: version
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: 'error: Invalid service name or version'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Service or version not found'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Failed to set active version'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Set Active Version for a Service
      tags:
      - McmpAPI
  /api/mcmp-apis/syncMcmpAPIs:
    post:
      consumes:
      - application/json
      description: Triggers the synchronization of MCMP API definitions from the configured
        YAML URL to the database.
      operationId: syncMcmpAPIs
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Successfully triggered MCMP API sync'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'message: Failed to trigger MCMP API sync'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Sync MCMP API Definitions
      tags:
      - McmpAPI
  /api/mcmp-apis/test/mc-infra-manager/getallns:
    get:
      description: Calls the GetAllNs action of the mc-infra-manager service via the
        CallApi service.
      operationId: testCallGetAllNs
      produces:
      - application/json
      responses:
        "200":
          description: Response from mc-infra-manager GetAllNs
          schema:
            type: object
        "400":
          description: 'error: Bad Request (e.g., invalid parameters)'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Service or Action Not Found'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Internal Server Error'
          schema:
            additionalProperties:
              type: string
            type: object
        "503":
          description: 'error: External API Service Unavailable'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Test Call to mc-infra-manager GetAllNs
      tags:
      - McmpAPI
      - Test
  /api/menus:
    post:
      consumes:
      - application/json
      description: Create a new menu
      operationId: createMenu
      parameters:
      - description: Menu Info
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/model.Menu'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Menu'
      security:
      - BearerAuth: []
      summary: Create new menu
      tags:
      - menus
  /api/menus/id/{menuId}:
    delete:
      consumes:
      - application/json
      description: Delete a menu
      operationId: deleteMenu
      parameters:
      - description: Menu ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete menu
      tags:
      - menus
    post:
      consumes:
      - application/json
      description: Get menu details by ID
      operationId: getMenuByID
      parameters:
      - description: Menu ID
        in: path
        name: menuId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Menu'
      security:
      - BearerAuth: []
      summary: Get menu by ID
      tags:
      - menus
    put:
      consumes:
      - application/json
      description: Update menu information
      operationId: updateMenu
      parameters:
      - description: Menu ID
        in: path
        name: id
        required: true
        type: string
      - description: Menu Info
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/model.Menu'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Menu'
      security:
      - BearerAuth: []
      summary: Update menu information
      tags:
      - menus
  /api/menus/list:
    post:
      consumes:
      - application/json
      description: List all menus as a tree structure. Admin permission required.
      operationId: listMenus
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MenuTreeNode'
            type: array
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'error: Forbidden'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: 서버 내부 오류'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all menus
      tags:
      - menus
  /api/menus/platform-roles:
    delete:
      consumes:
      - application/json
      description: Delete the mapping between a platform role and a menu.
      operationId: deleteMenusRolesMapping
      parameters:
      - description: Platform Role ID
        in: query
        name: roleId
        type: string
      - description: Menu ID
        in: query
        name: menuId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Menu mapping deleted successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error: platform role and menu ID are required'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: 서버 내부 오류'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete platform role-menu mapping
      tags:
      - menus
    post:
      consumes:
      - application/json
      description: Create a new menu mapping
      operationId: createMenusRolesMapping
      parameters:
      - description: Menu Mapping
        in: body
        name: mapping
        required: true
        schema:
          $ref: '#/definitions/model.CreateMenuMappingRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create menu mapping
      tags:
      - menu
  /api/menus/platform-roles/list:
    post:
      consumes:
      - application/json
      description: List menus mapped to a specific platform role.
      operationId: listMappedMenusByRole
      parameters:
      - description: Platform Role ID
        in: query
        name: roleId
        type: string
      - description: Menu ID
        in: query
        name: menuId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Menu'
            type: array
        "400":
          description: 'error: platform role is required'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: 서버 내부 오류'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List menus mapped to platform role
      tags:
      - menus
  /api/menus/setup/initial-menu:
    post:
      consumes:
      - application/json
      description: Register or update menus from a local YAML file specified by the
        filePath query parameter, or from the MCWEBCONSOLE_MENUYAML URL in .env if
        not provided. If loaded from URL, the file is saved to asset/menu/menu.yaml.
      operationId: registerMenusFromYAML
      parameters:
      - description: YAML file path (optional, uses .env URL or default local path
          if not provided)
        in: query
        name: filePath
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Successfully registered menus from YAML'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: 실패 메시지'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Register/Update menus from YAML file or URL
      tags:
      - menus
  /api/menus/setup/initial-menu2:
    post:
      consumes:
      - text/plain
      description: 'Parse YAML text in the request body and register or update menus
        in the database. Recommended Content-Type: text/plain, text/yaml, application/yaml.'
      operationId: registerMenusFromBody
      parameters:
      - description: Menu definitions in YAML format (must contain 'menus:' root key)
        example: '"menus:\n  - id: new-item\n    parentid: dashboard\n    displayname:
          New Menu Item\n    restype: menu\n    isaction: false\n    priority: 10\n    menunumber:
          9999"'
        in: body
        name: yaml
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Successfully registered menus from request body'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error: 잘못된 요청 본문 또는 YAML 형식 오류'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: 서버 내부 오류'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Register/Update menus from YAML in request body
      tags:
      - menus
  /api/menus/tree/list:
    post:
      consumes:
      - application/json
      description: List all menus as a tree structure. Admin permission required.
      operationId: listMenusTree
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MenuTreeNode'
            type: array
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'error: Forbidden'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: 서버 내부 오류'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all menus Tree
      tags:
      - menus
  /api/menus/user-menu-tree:
    get:
      consumes:
      - application/json
      description: Get menu tree based on user's platform roles
      operationId: getUserMenuTree
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MenuTreeNode'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user menu tree by platform roles
      tags:
      - menus
  /api/permissions/mciam:
    post:
      consumes:
      - application/json
      description: Create a new permission with the specified information.
      operationId: createMciamPermission
      parameters:
      - description: Permission Info
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/model.MciamPermission'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.MciamPermission'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create new permission
      tags:
      - permissions
  /api/permissions/mciam/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a permission by its ID.
      operationId: deleteMciamPermission
      parameters:
      - description: Permission ID
        in: path
        name: permissionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete permission
      tags:
      - permissions
    put:
      consumes:
      - application/json
      description: Update the details of an existing permission.
      operationId: updateMciamPermission
      parameters:
      - description: Permission ID
        in: path
        name: permissionId
        required: true
        type: string
      - description: Permission Info
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/model.MciamPermission'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MciamPermission'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update permission
      tags:
      - permissions
  /api/permissions/mciam/id/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve permission details by permission ID.
      operationId: getMciamPermissionByID
      parameters:
      - description: Permission ID
        in: path
        name: permissionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MciamPermission'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get permission by ID
      tags:
      - permissions
  /api/permissions/mciam/list:
    post:
      consumes:
      - application/json
      description: Retrieve a list of all permissions.
      operationId: listMciamPermissions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MciamPermission'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all permissions
      tags:
      - permissions
  /api/projects:
    post:
      consumes:
      - application/json
      description: Create a new project with the specified information.
      operationId: createProject
      parameters:
      - description: Project Info
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/model.Project'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Project'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create new project
      tags:
      - projects
  /api/projects/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a project by its ID.
      operationId: deleteProject
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete project
      tags:
      - projects
    get:
      consumes:
      - application/json
      description: Retrieve project details by project ID.
      operationId: getProjectByID
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Project'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get project by ID
      tags:
      - projects
    put:
      consumes:
      - application/json
      description: Update the details of an existing project.
      operationId: updateProject
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: string
      - description: Project Info
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/model.Project'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Project'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update project
      tags:
      - projects
  /api/projects/{id}/workspaces/{workspaceId}:
    post:
      consumes:
      - application/json
      description: 프로젝트에 워크스페이스를 연결합니다.
      operationId: addWorkspaceToProject
      parameters:
      - description: 프로젝트 ID
        in: path
        name: id
        required: true
        type: integer
      - description: 워크스페이스 ID
        in: path
        name: workspaceId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: 'error: 잘못된 ID 형식'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: 프로젝트 또는 워크스페이스를 찾을 수 없습니다'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: 서버 내부 오류'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: 프로젝트에 워크스페이스 연결
      tags:
      - projects
  /api/projects/list:
    post:
      consumes:
      - application/json
      description: Retrieve a list of all projects.
      operationId: listProjects
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Project'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all projects
      tags:
      - projects
  /api/projects/name/{projectName}:
    get:
      consumes:
      - application/json
      description: Get project details by name
      operationId: getProjectByName
      parameters:
      - description: Project Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Project'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get project by name
      tags:
      - projects
  /api/resource-types/cloud-resources:
    post:
      consumes:
      - application/json
      description: 새로운 리소스 타입을 생성합니다
      operationId: createResourceType
      parameters:
      - description: Resource Type Info
        in: body
        name: resourceType
        required: true
        schema:
          $ref: '#/definitions/model.ResourceType'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResourceType'
        "400":
          description: 'error: Invalid request'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'error: Forbidden'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Cloud에서 관리되는 Resource(vm, nlb, k8s 등의 그룹) 새 리소스 타입 생성
      tags:
      - resource-types
  /api/resource-types/cloud-resources/framework/:frameworkId/id/:resourceTypeId:
    delete:
      consumes:
      - application/json
      description: 리소스 타입을 삭제합니다
      operationId: deleteResourceType
      parameters:
      - description: Resource Type ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'error: Forbidden'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Resource Type not found'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: 리소스 타입 삭제
      tags:
      - resource-types
    get:
      consumes:
      - application/json
      description: 특정 리소스 타입을 ID로 조회합니다
      operationId: getCloudResourceTypeByID
      parameters:
      - description: Resource Type ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResourceType'
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'error: Forbidden'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Resource Type not found'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: 리소스 타입 ID로 조회
      tags:
      - resource-types
    put:
      consumes:
      - application/json
      description: 리소스 타입 정보를 업데이트합니다
      operationId: updateResourceType
      parameters:
      - description: Resource Type ID
        in: path
        name: id
        required: true
        type: string
      - description: Resource Type Info
        in: body
        name: resourceType
        required: true
        schema:
          $ref: '#/definitions/model.ResourceType'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResourceType'
        "400":
          description: 'error: Invalid request'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'error: Forbidden'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Resource Type not found'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: 리소스 타입 업데이트
      tags:
      - resource-types
  /api/resource-types/cloud-resources/list:
    post:
      consumes:
      - application/json
      description: 모든 리소스 타입 목록을 조회합니다
      operationId: listCloudResourceTypes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ResourceType'
            type: array
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'error: Forbidden'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: 리소스 타입 목록 조회
      tags:
      - resource-types
  /api/roles:
    post:
      consumes:
      - application/json
      description: Create a new role
      operationId: createRole
      parameters:
      - description: Role Info
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/model.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.RoleMaster'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create role
      tags:
      - roles
  /api/roles/{roleType}/{roleId}/mciam-permissions:
    get:
      consumes:
      - application/json
      description: 특정 역할의 MC-IAM 권한 ID 목록을 조회합니다.
      operationId: getRoleMciamPermissions
      parameters:
      - description: 역할 타입 ('platform' or 'workspace')
        in: path
        name: roleType
        required: true
        type: string
      - description: 역할 ID
        in: path
        name: roleId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 권한 ID 목록
          schema:
            items:
              type: string
            type: array
      summary: 역할의 MC-IAM 권한 목록 조회 - Renamed
      tags:
      - roles
      - mciam-permissions
  /api/roles/{roleType}/{roleId}/mciam-permissions/{permissionId}:
    delete:
      consumes:
      - application/json
      description: 역할에서 MC-IAM 권한을 제거합니다.
      operationId: removeMciamPermissionFromRole
      parameters:
      - description: 역할 타입 ('platform' or 'workspace')
        in: path
        name: roleType
        required: true
        type: string
      - description: 역할 ID
        in: path
        name: roleId
        required: true
        type: integer
      - description: MC-IAM 권한 ID
        in: path
        name: permissionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: 역할에서 MC-IAM 권한 제거 - Renamed
      tags:
      - roles
      - mciam-permissions
    post:
      consumes:
      - application/json
      description: 역할에 MC-IAM 권한을 할당합니다.
      operationId: assignMciamPermissionToRole
      parameters:
      - description: 역할 타입 ('platform' or 'workspace')
        in: path
        name: roleType
        required: true
        type: string
      - description: 역할 ID
        in: path
        name: roleId
        required: true
        type: integer
      - description: MC-IAM 권한 ID
        in: path
        name: permissionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: 역할에 MC-IAM 권한 할당 - Renamed
      tags:
      - roles
      - mciam-permissions
  /api/roles/assign/platform-role:
    post:
      consumes:
      - application/json
      description: Assign a platform role to a user
      operationId: assignPlatformRole
      parameters:
      - description: Platform Role Assignment Info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.AssignRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Assign platform role
      tags:
      - roles
  /api/roles/assign/workspace-role:
    post:
      consumes:
      - application/json
      description: Assign a workspace role to a user
      operationId: assignWorkspaceRole
      parameters:
      - description: Workspace Role Assignment Info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.AssignWorkspaceRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Assign workspace role
      tags:
      - roles
  /api/roles/csp:
    post:
      consumes:
      - application/json
      description: Create a new csp role
      operationId: createCspRole
      parameters:
      - description: CSP Role Creation Info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create csp role
      tags:
      - roles
  /api/roles/csp-roles:
    post:
      consumes:
      - application/json
      description: Create a new mapping between role and CSP role
      operationId: addCspRoleMappings
      parameters:
      - description: Mapping Info
        in: body
        name: mapping
        required: true
        schema:
          $ref: '#/definitions/model.RoleMasterCspRoleMappingRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.RoleMasterCspRoleMappingRequest'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create role-CSP role mapping
      tags:
      - roles
  /api/roles/csp-roles/batch:
    post:
      consumes:
      - application/json
      description: Create multiple new csp roles
      operationId: createCspRoles
      parameters:
      - description: Multiple CSP Role Creation Info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateCspRolesRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/model.CspRole'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create multiple csp roles
      tags:
      - roles
  /api/roles/csp-roles/id/:roleId:
    get:
      consumes:
      - application/json
      description: Get a mapping between role and CSP role
      operationId: getCspRoleMappingByRoleId
      parameters:
      - description: Mapping Info
        in: body
        name: mapping
        required: true
        schema:
          $ref: '#/definitions/model.RoleMasterCspRoleMappingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RoleMasterCspRoleMappingRequest'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get role-CSP role mapping
      tags:
      - roles
  /api/roles/csp-roles/id/{roleId}:
    delete:
      consumes:
      - application/json
      description: Delete a role
      operationId: deleteCspRole
      parameters:
      - description: Role ID
        in: path
        name: roleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete csp role
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: Update role information
      operationId: updateCspRole
      parameters:
      - description: Role ID
        in: path
        name: roleId
        required: true
        type: string
      - description: Role Info
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/model.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RoleMaster'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update csp role
      tags:
      - roles
  /api/roles/csp-roles/list:
    post:
      consumes:
      - application/json
      description: Get a mapping between role and CSP role
      operationId: listCspRoleMappings
      parameters:
      - description: Mapping Info
        in: body
        name: mapping
        required: true
        schema:
          $ref: '#/definitions/model.RoleMasterCspRoleMappingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RoleMasterCspRoleMappingRequest'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get role-CSP role mapping
      tags:
      - roles
  /api/roles/csp/id/{roleId}:
    get:
      consumes:
      - application/json
      description: Get csp role details by ID
      operationId: getCspRoleByID
      parameters:
      - description: CSP Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RoleMaster'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get csp role by ID
      tags:
      - roles
  /api/roles/csp/list:
    post:
      consumes:
      - application/json
      description: Get a list of all csp roles
      operationId: listCSPRoles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.RoleMaster'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List csp roles
      tags:
      - roles
  /api/roles/csp/name/{roleName}:
    get:
      consumes:
      - application/json
      description: Get csp role details by Name
      operationId: getCspRoleByName
      parameters:
      - description: CSP Role Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RoleMaster'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get csp role by Name
      tags:
      - roles
  /api/roles/id/{roleId}:
    delete:
      consumes:
      - application/json
      description: Delete a role by its name.
      operationId: deleteRole
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete role
      tags:
      - roles
    get:
      consumes:
      - application/json
      description: Get role details by ID
      operationId: getRoleByRoleID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RoleMaster'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get role by ID
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: Update the details of an existing role.
      operationId: updateRole
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: Role Info
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/model.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RoleMaster'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update role
      tags:
      - roles
  /api/roles/id/{roleId}/assign:
    post:
      consumes:
      - application/json
      description: Assign a role to a user
      operationId: assignRole
      parameters:
      - description: Role Assignment Info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.AssignRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Assign role
      tags:
      - roles
  /api/roles/id/{roleId}/unassign:
    delete:
      consumes:
      - application/json
      description: Remove a role from a user
      operationId: removeRole
      parameters:
      - description: Role Removal Info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.AssignRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Remove role
      tags:
      - roles
  /api/roles/list:
    post:
      consumes:
      - application/json
      description: Retrieve a list of all roles.
      operationId: listRoles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.RoleMaster'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all roles
      tags:
      - roles
  /api/roles/mappings/csp-roles/list:
    post:
      consumes:
      - application/json
      description: List users by csp role
      operationId: listUsersByCspRole
      parameters:
      - description: Filter Role Master Mapping Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.FilterRoleMasterMappingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.RoleMasterMapping'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List users by csp role
      tags:
      - roles
  /api/roles/mappings/list:
    post:
      consumes:
      - application/json
      description: List role master mappings
      operationId: listRoleMasterMappings
      parameters:
      - description: Filter Role Master Mapping Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.FilterRoleMasterMappingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.RoleMasterMapping'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List role master mappings
      tags:
      - roles
  /api/roles/mappings/platform-roles/users/list:
    post:
      consumes:
      - application/json
      description: List users by platform role
      operationId: listUsersByPlatformRole
      parameters:
      - description: Filter Role Master Mapping Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.FilterRoleMasterMappingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.RoleMasterMapping'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List users by platform role
      tags:
      - roles
  /api/roles/mappings/role/id/:roleId:
    get:
      consumes:
      - application/json
      description: Get role master mappings
      operationId: getRoleMasterMappings
      parameters:
      - description: Filter Role Master Mapping Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.FilterRoleMasterMappingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RoleMasterMapping'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get role master mappings
      tags:
      - roles
  /api/roles/mappings/workspace-roles/users/list:
    post:
      consumes:
      - application/json
      description: List users by workspace role
      operationId: listUsersByWorkspaceRole
      parameters:
      - description: Filter Role Master Mapping Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.FilterRoleMasterMappingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.RoleMasterMapping'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List users by workspace role
      tags:
      - roles
  /api/roles/menu-roles/list:
    post:
      consumes:
      - application/json
      description: Get a list of all menu roles
      operationId: listPlatformRoles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.RoleMaster'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List menu roles
      tags:
      - roles
  /api/roles/name/{roleName}:
    get:
      consumes:
      - application/json
      description: Retrieve role details by role name.
      operationId: getRoleByRoleName
      parameters:
      - description: Role name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RoleMaster'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get role by Name
      tags:
      - roles
  /api/roles/platform-roles:
    post:
      consumes:
      - application/json
      description: Create a new menu role
      operationId: createPlatformRole
      parameters:
      - description: Menu Role Creation Info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create menu role
      tags:
      - roles
  /api/roles/platform-roles/id/{roleId}:
    delete:
      consumes:
      - application/json
      description: Delete a platform role
      operationId: deletePlatformRole
      parameters:
      - description: Platform Role ID
        in: path
        name: roleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete platform role
      tags:
      - roles
    get:
      consumes:
      - application/json
      description: Get platform role details by ID
      operationId: getPlatformRoleByID
      parameters:
      - description: Platform Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RoleMaster'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get platform role by ID
      tags:
      - roles
  /api/roles/platform-roles/name/{roleName}:
    get:
      consumes:
      - application/json
      description: Get menu role details by Name
      operationId: getPlatformRoleByName
      parameters:
      - description: Menu Role Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RoleMaster'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get menu role by Name
      tags:
      - roles
  /api/roles/unassign/csp-roles:
    delete:
      consumes:
      - application/json
      description: Delete a mapping between workspace role and CSP role
      operationId: removeCspRoleMappings
      parameters:
      - description: Mapping Info
        in: body
        name: mapping
        required: true
        schema:
          $ref: '#/definitions/model.RoleMasterCspRoleMappingRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete workspace role-CSP role mapping
      tags:
      - roles
  /api/roles/unassign/platform-role:
    delete:
      consumes:
      - application/json
      description: Remove a platform role from a user
      operationId: removePlatformRole
      parameters:
      - description: Platform Role Removal Info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.AssignRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Remove platform role
      tags:
      - roles
  /api/roles/unassign/workspace-role:
    delete:
      consumes:
      - application/json
      description: Remove a workspace role from a user
      operationId: removeWorkspaceRole
      parameters:
      - description: Workspace Role Removal Info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.AssignRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Remove workspace role
      tags:
      - roles
  /api/roles/workspace-roles:
    post:
      consumes:
      - application/json
      description: Create a new workspace role
      operationId: createWorkspaceRole
      parameters:
      - description: Workspace Role Creation Info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create workspace role
      tags:
      - roles
  /api/roles/workspace-roles/id/{roleId}:
    delete:
      consumes:
      - application/json
      description: Delete a workspace role
      operationId: deleteWorkspaceRole
      parameters:
      - description: Workspace Role ID
        in: path
        name: roleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete workspace role
      tags:
      - roles
    get:
      consumes:
      - application/json
      description: Get workspace role details by ID
      operationId: getWorkspaceRoleByID
      parameters:
      - description: Workspace Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RoleMaster'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get workspace role by ID
      tags:
      - roles
  /api/roles/workspace-roles/list:
    post:
      consumes:
      - application/json
      description: Get a list of all workspace roles
      operationId: listWorkspaceRoles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.RoleMaster'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List workspace roles
      tags:
      - roles
  /api/roles/workspace-roles/name/{roleName}:
    get:
      consumes:
      - application/json
      description: Get workspace role details by Name
      operationId: getWorkspaceRoleByName
      parameters:
      - description: Workspace Role Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RoleMaster'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get workspace role by Name
      tags:
      - roles
  /api/setup/check-user-roles:
    get:
      consumes:
      - application/json
      description: Check all roles assigned to a user. 특정 유저가 가진 role 목록을 조회합니다.
      operationId: checkUserRoles
      parameters:
      - description: Username to check roles
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Check user roles
      tags:
      - admin
  /api/setup/initial-role-menu-permission:
    get:
      consumes:
      - application/json
      description: CSV 파일을 읽어서 메뉴 권한을 초기화합니다
      operationId: initializeMenuPermissions
      parameters:
      - description: CSV file path (optional, uses default if not provided)
        in: query
        name: filePath
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - BearerAuth: []
      summary: Initialize menu permissions from CSV
      tags:
      - admin
  /api/setup/sync-projects:
    post:
      consumes:
      - application/json
      description: mc-infra-manager의 네임스페이스 목록을 조회하여 로컬 DB에 없는 프로젝트를 추가합니다.
      operationId: syncProjects
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Project synchronization successful'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: 서버 내부 오류 또는 동기화 실패'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: mc-infra-manager와 프로젝트 동기화
      tags:
      - projects
  /api/users:
    post:
      consumes:
      - application/json
      description: Create a new user with the specified information.
      operationId: createUser
      parameters:
      - description: User Info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create new user
      tags:
      - users
  /api/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their ID.
      operationId: deleteUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the details of an existing user.
      operationId: updateUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User Info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /api/users/id/{userId}:
    get:
      consumes:
      - application/json
      description: Retrieve user details by user ID.
      operationId: getUserByID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
  /api/users/id/{userId}/status:
    post:
      consumes:
      - application/json
      description: Update user status (active/inactive)
      operationId: updateUserStatus
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User Status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/model.UserStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user status
      tags:
      - users
  /api/users/id/{userId}/workspaces/id/{workspaceId}/roles/list:
    get:
      consumes:
      - application/json
      description: Get workspaces and roles for a specific user and workspace
      operationId: getUserWorkspaceAndWorkspaceRolesByUserIDAndWorkspaceID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: Workspace ID
        in: path
        name: workspaceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserWorkspaceRole'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user workspace and workspace roles by user ID and workspace ID
      tags:
      - users
  /api/users/id/{userId}/workspaces/list:
    get:
      consumes:
      - application/json
      description: Get workspaces for a specific user
      operationId: getUserWorkspacesByUserID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Workspace'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user workspaces by user ID
      tags:
      - users
  /api/users/id/{userId}/workspaces/roles/list:
    get:
      consumes:
      - application/json
      description: Get workspaces and roles for a specific user
      operationId: getUserWorkspaceAndWorkspaceRolesByUserID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserWorkspaceRole'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user workspace and workspace roles by user ID
      tags:
      - users
  /api/users/kc/{kcUserId}:
    get:
      consumes:
      - application/json
      description: Get user details by KcID
      operationId: getUserByKcID
      parameters:
      - description: User KcID
        in: path
        name: kcUserId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user by KcID
      tags:
      - users
  /api/users/list:
    post:
      consumes:
      - application/json
      description: Retrieve a list of all users.
      operationId: listUsers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - users
  /api/users/menus-tree/list:
    post:
      consumes:
      - application/json
      description: Get the menu tree accessible to the current user's platform role.
      operationId: listUserMenuTree
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MenuTreeNode'
            type: array
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: 서버 내부 오류'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get current user's menu tree
      tags:
      - menus
  /api/users/menus/list:
    post:
      consumes:
      - application/json
      description: Get the menu list accessible to the current user's platform role.
      operationId: listUserMenu
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Menu'
            type: array
      summary: Get current user's menu list
      tags:
      - menus
  /api/users/name/{username}:
    get:
      consumes:
      - application/json
      description: Get user details by username
      operationId: getUserByUsername
      parameters:
      - description: Username
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user by username
      tags:
      - users
  /api/users/workspaces/id/{workspaceId}/projects/list:
    get:
      consumes:
      - application/json
      description: List projects for the current user
      operationId: listUserProjectsByWorkspace
      parameters:
      - description: Workspace ID
        in: path
        name: workspaceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Project'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List user projects by workspace
      tags:
      - users
  /api/users/workspaces/list:
    post:
      consumes:
      - application/json
      description: List workspaces for the current user
      operationId: listUserWorkspaces
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Workspace'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List user workspaces
      tags:
      - users
  /api/users/workspaces/roles/list:
    post:
      consumes:
      - application/json
      description: List workspaces and roles for the current user
      operationId: listUserWorkspaceAndWorkspaceRoles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.RoleMaster'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List user workspace and roles
      tags:
      - users
  /api/workspaces:
    post:
      consumes:
      - application/json
      description: Create a new workspace with the specified information.
      operationId: createWorkspace
      parameters:
      - description: Workspace Info
        in: body
        name: workspace
        required: true
        schema:
          $ref: '#/definitions/model.Workspace'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Workspace'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create new workspace
      tags:
      - workspaces
  /api/workspaces/{id}/users:
    post:
      consumes:
      - application/json
      description: Add a user to a workspace
      operationId: addUserToWorkspace
      parameters:
      - description: Workspace ID
        in: path
        name: id
        required: true
        type: string
      - description: User Info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.AssignRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Add user to workspace
      tags:
      - workspaces
  /api/workspaces/{id}/users/{userId}:
    delete:
      consumes:
      - application/json
      description: Remove a user from a workspace
      operationId: removeUserFromWorkspace
      parameters:
      - description: Workspace ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Remove user from workspace
      tags:
      - workspaces
  /api/workspaces/assign/projects:
    post:
      consumes:
      - application/json
      description: Add a project to a workspace
      operationId: addProjectToWorkspace
      parameters:
      - description: Workspace ID
        in: path
        name: id
        required: true
        type: string
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Workspace'
        "400":
          description: 'error: Invalid request'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'error: Forbidden'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Workspace or Project not found'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Add project to workspace
      tags:
      - workspaces
  /api/workspaces/id/{workspaceId}:
    delete:
      consumes:
      - application/json
      description: Delete a workspace by its ID.
      operationId: deleteWorkspace
      parameters:
      - description: Workspace ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete workspace
      tags:
      - workspaces
    get:
      consumes:
      - application/json
      description: Retrieve workspace details by workspace ID.
      operationId: getWorkspaceByID
      parameters:
      - description: Workspace ID
        in: path
        name: workspaceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Workspace'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get workspace by ID
      tags:
      - workspaces
    put:
      consumes:
      - application/json
      description: Update the details of an existing workspace.
      operationId: updateWorkspace
      parameters:
      - description: Workspace ID
        in: path
        name: id
        required: true
        type: string
      - description: Workspace Info
        in: body
        name: workspace
        required: true
        schema:
          $ref: '#/definitions/model.Workspace'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Workspace'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update workspace
      tags:
      - workspaces
  /api/workspaces/id/{workspaceId}/projects/list:
    get:
      consumes:
      - application/json
      description: Retrieve project list belonging to specific workspace
      operationId: getWorkspaceProjectsByWorkspaceId
      parameters:
      - description: Workspace ID
        in: path
        name: workspaceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Project'
            type: array
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'error: Forbidden'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Workspace not found'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List workspace projects
      tags:
      - workspaces
  /api/workspaces/id/{workspaceId}/users/id/{userId}:
    get:
      consumes:
      - application/json
      description: Get roles assigned to a user in a workspace
      operationId: getUserWorkspaceRoles
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: Workspace ID
        in: path
        name: workspaceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.RoleMaster'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user workspace roles
      tags:
      - roles
  /api/workspaces/id/{workspaceId}/users/list:
    post:
      consumes:
      - application/json
      description: Retrieve users and roles list belonging to workspace
      operationId: listUsersAndRolesByWorkspace
      parameters:
      - description: Workspace ID
        in: path
        name: workspaceId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserWorkspaceRole'
            type: array
        "400":
          description: 'error: Invalid workspace ID'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Workspace not found'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Internal server error'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List users and roles by workspace
      tags:
      - workspaces
  /api/workspaces/list:
    post:
      consumes:
      - application/json
      description: Retrieve a list of all workspaces.
      operationId: listWorkspaces
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Workspace'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all workspaces
      tags:
      - workspaces
  /api/workspaces/name/{workspaceName}:
    get:
      consumes:
      - application/json
      description: Retrieve specific workspace by name
      operationId: getWorkspaceByName
      parameters:
      - description: Workspace Name
        in: path
        name: workspaceName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Workspace'
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'error: Forbidden'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Workspace not found'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get workspace by name
      tags:
      - workspaces
  /api/workspaces/projects/list:
    post:
      consumes:
      - application/json
      description: Retrieve project list belonging to specific workspace
      operationId: listWorkspaceProjects
      parameters:
      - description: Workspace ID
        in: path
        name: workspaceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Project'
            type: array
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'error: Forbidden'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Workspace not found'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List workspace projects
      tags:
      - workspaces
  /api/workspaces/temporary-credentials:
    post:
      consumes:
      - application/json
      description: Get temporary credentials for CSP
      operationId: mciamGetTemporaryCredentials
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get temporary credentials
      tags:
      - csp-credentials
  /api/workspaces/unassign/projects:
    delete:
      consumes:
      - application/json
      description: Remove a project from a workspace
      operationId: removeProjectFromWorkspace
      parameters:
      - description: Workspace ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Remove project from workspace
      tags:
      - workspaces
  /api/workspaces/users-roles/list:
    post:
      consumes:
      - application/json
      description: Retrieve the list of users and roles assigned to the workspace.
      operationId: listAllWorkspaceUsersAndRoles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.WorkspaceWithUsersAndRoles'
            type: array
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'error: Forbidden'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Internal server error'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List users and roles in workspace
      tags:
      - workspaces
  /api/workspaces/users/list:
    post:
      consumes:
      - application/json
      description: List users by workspace criteria
      operationId: listWorkspaceUsers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.WorkspaceWithUsersAndRoles'
            type: array
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'error: Forbidden'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List workspace users
      tags:
      - workspaces
  /api/workspaces/workspace-ticket:
    post:
      consumes:
      - application/json
      description: Set workspace ticket
      operationId: mciamWorkspaceTicket
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Workspace ticket set successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Set workspace ticket
      tags:
      - auth
  /readyz:
    get:
      consumes:
      - application/json
      description: Check the health status of the service.
      operationId: mciamCheckHealth
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health check
      tags:
      - health
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
