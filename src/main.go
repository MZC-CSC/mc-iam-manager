package main

import (
	"context"
	"log"
	"net/http"
	"os"
	"os/signal"
	"path/filepath"
	"syscall"
	"time"

	"github.com/joho/godotenv"
	"github.com/labstack/echo/v4"
	echomiddleware "github.com/labstack/echo/v4/middleware"
	"github.com/m-cmp/mc-iam-manager/config"
	"github.com/m-cmp/mc-iam-manager/handler"
	"github.com/m-cmp/mc-iam-manager/middleware"
	"github.com/m-cmp/mc-iam-manager/service"

	// "github.com/m-cmp/mc-iam-manager/service" // Remove unused service import

	// "github.com/m-cmp/mc-iam-manager/repository" // Removed unused import

	// Ensure YAML is imported
	"gorm.io/driver/postgres"
	"gorm.io/gorm"

	_ "github.com/m-cmp/mc-iam-manager/docs" // docs is generated by Swag CLI, you have to import it.
	echoSwagger "github.com/swaggo/echo-swagger"
)

// @title MC IAM Manager API
// @version 1.0
// @description MC IAM Manager API Documentation
// @host localhost:3000
// @BasePath /api/v1
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.
func main() {
	// .env 파일 로드 (프로젝트 루트에서 찾도록 수정)
	envPath := filepath.Join("..", ".env")
	if err := godotenv.Load(envPath); err != nil {
		log.Printf("Warning: .env 파일을 로드하는데 실패했습니다: %v", err)
	}

	// 데이터베이스 초기화
	dbConfig := config.NewDatabaseConfig()
	db, err := gorm.Open(postgres.Open(dbConfig.GetDSN()), &gorm.Config{})
	if err != nil {
		log.Fatalf("Failed to initialize database: %v", err)
	}

	// Keycloak 초기화
	if err := config.InitKeycloak(); err != nil {
		log.Fatalf("Failed to initialize Keycloak: %v", err)
	}

	// Echo 인스턴스 생성
	e := echo.New()

	// 로그 레벨 설정
	e.Debug = true

	// 미들웨어 설정
	e.Use(echomiddleware.Logger())
	e.Use(echomiddleware.Recover())
	e.Use(echomiddleware.CORS())

	// Repository and Service initializations are now handled within Handler constructors

	// Keycloak Service 초기화
	keycloakService := service.NewKeycloakService()

	// 핸들러 초기화
	authHandler := handler.NewAuthHandler(db)
	userHandler := handler.NewUserHandler(db)
	menuHandler := handler.NewMenuHandler(db)
	workspaceHandler := handler.NewWorkspaceHandler(db)
	projectHandler := handler.NewProjectHandler(db)
	resourceTypeHandler := handler.NewResourceTypeHandler(db)
	cspMappingHandler := handler.NewCspMappingHandler(db)
	cspCredentialHandler := handler.NewCspCredentialHandler(db)

	// 메뉴 핸들러 초기화 (DB 사용)
	menuHandler = handler.NewMenuHandler(db) // Pass db

	// Workspace 및 Project 핸들러 초기화
	workspaceHandler = handler.NewWorkspaceHandler(db) // Pass db
	projectHandler = handler.NewProjectHandler(db)     // Correct: Pass db

	// 라우트 설정
	e.GET("/readyz", func(c echo.Context) error {
		status := c.QueryParam("status")
		if status == "detail" {
			// Keycloak 연결 확인
			ctx := context.Background()
			realmExists, err := keycloakService.CheckRealm(ctx)
			if err != nil {
				return c.JSON(http.StatusServiceUnavailable, map[string]string{
					"status": "unhealthy",
					"error":  err.Error(),
				})
			}
			if !realmExists {
				return c.JSON(http.StatusServiceUnavailable, map[string]string{
					"status": "unhealthy",
					"error":  "realm does not exist",
				})
			}

			// 클라이언트 확인
			clientExists, err := keycloakService.CheckClient(ctx)
			if err != nil {
				return c.JSON(http.StatusServiceUnavailable, map[string]string{
					"status": "unhealthy",
					"error":  err.Error(),
				})
			}
			if !clientExists {
				return c.JSON(http.StatusServiceUnavailable, map[string]string{
					"status": "unhealthy",
					"error":  "client does not exist",
				})
			}

			return c.JSON(http.StatusOK, map[string]string{
				"status": "healthy",
				"realm":  "exists",
				"client": "exists",
			})
		}
		return c.JSON(http.StatusOK, map[string]string{"status": "healthy"})
	})

	api := e.Group("/api")
	// 인증 라우트 (Level 1: 인증만 필요)
	api.POST("/auth/login", authHandler.Login)
	api.POST("/auth/logout", authHandler.Logout)
	api.POST("/auth/refresh", authHandler.RefreshToken)
	api.POST("/auth/workspace-ticket", authHandler.WorkspaceTicket, middleware.AuthMiddleware)

	// 사용자 라우트 (Level 2: 기본 권한 필요)
	userRoutes := api.Group("/users", middleware.AuthMiddleware, middleware.PermissionMiddleware(db, middleware.Level2, ""))
	{
		userRoutes.GET("", userHandler.GetUsers)
		userRoutes.GET("/:id", userHandler.GetUserByID)
		userRoutes.GET("/username/:username", userHandler.GetUserByUsername)
		userRoutes.POST("", userHandler.CreateUser)
		userRoutes.PUT("/:id", userHandler.UpdateUser)
		userRoutes.DELETE("/:id", userHandler.DeleteUser)
		userRoutes.POST("/:id/approve", userHandler.ApproveUser)
		userRoutes.GET("/workspaces", userHandler.GetUserWorkspaceAndWorkspaceRoles)
		userRoutes.GET("/menus", menuHandler.GetUserMenuTree)
	}

	// 메뉴 라우트 (Level 2: 기본 권한 필요)
	menuRoutes := api.Group("/menus", middleware.AuthMiddleware, middleware.PermissionMiddleware(db, middleware.Level2, ""))
	{
		menuRoutes.GET("", menuHandler.GetAllMenusTree)
		menuRoutes.GET("/all", menuHandler.GetAllMenusTree)
		menuRoutes.GET("/:id", menuHandler.GetByID)
		menuRoutes.POST("", menuHandler.Create)
		menuRoutes.PUT("/:id", menuHandler.Update)
		menuRoutes.DELETE("/:id", menuHandler.Delete)
		menuRoutes.POST("/register-from-yaml", menuHandler.RegisterMenusFromYAML)
		menuRoutes.POST("/register-from-body", menuHandler.RegisterMenusFromBody)
	}

	// Workspace 라우트 (Level 3: 특정 권한 필요)
	workspaceRoutes := api.Group("/workspaces", middleware.AuthMiddleware, middleware.PermissionMiddleware(db, middleware.Level3, "mc-iam-manager:workspace:manage"))
	{
		workspaceRoutes.POST("", workspaceHandler.CreateWorkspace)
		workspaceRoutes.GET("", workspaceHandler.ListWorkspaces)
		workspaceRoutes.GET("/name/:name", workspaceHandler.GetWorkspaceByName)
		workspaceRoutes.GET("/:id", workspaceHandler.GetWorkspaceByID)
		workspaceRoutes.PUT("/:id", workspaceHandler.UpdateWorkspace)
		workspaceRoutes.DELETE("/:id", workspaceHandler.DeleteWorkspace)
		workspaceRoutes.POST("/:id/projects/:projectId", workspaceHandler.AddProjectToWorkspace)
		workspaceRoutes.DELETE("/:id/projects/:projectId", workspaceHandler.RemoveProjectFromWorkspace)
		workspaceRoutes.GET("/:id/projects", workspaceHandler.ListProjectsByWorkspace)
		workspaceRoutes.GET("/:id/users", workspaceHandler.ListUsersAndRolesByWorkspace)
	}

	// Project 라우트 (Level 3: 특정 권한 필요)
	projectRoutes := api.Group("/projects", middleware.AuthMiddleware, middleware.PermissionMiddleware(db, middleware.Level3, "mc-iam-manager:project:manage"))
	{
		projectRoutes.POST("", projectHandler.CreateProject)
		projectRoutes.GET("", projectHandler.ListProjects)
		projectRoutes.GET("/name/:name", projectHandler.GetProjectByName)
		projectRoutes.GET("/:id", projectHandler.GetProjectByID)
		projectRoutes.PUT("/:id", projectHandler.UpdateProject)
		projectRoutes.DELETE("/:id", projectHandler.DeleteProject)
		projectRoutes.POST("/:id/workspaces/:workspaceId", projectHandler.AddWorkspaceToProject)
		projectRoutes.DELETE("/:id/workspaces/:workspaceId", projectHandler.RemoveWorkspaceFromProject)
		projectRoutes.POST("/sync-projects", projectHandler.SyncProjects)
	}

	// 리소스 유형 관리 API 라우트 (Level 3: 특정 권한 필요)
	resourceTypeRoutes := api.Group("/resource-types", middleware.AuthMiddleware, middleware.PermissionMiddleware(db, middleware.Level3, "mc-iam-manager:resource-type:manage"))
	{
		resourceTypeRoutes.POST("", resourceTypeHandler.CreateResourceType)
		resourceTypeRoutes.GET("", resourceTypeHandler.ListResourceTypes)
		resourceTypeRoutes.GET("/:frameworkId/:id", resourceTypeHandler.GetResourceTypeByID)
		resourceTypeRoutes.PUT("/:frameworkId/:id", resourceTypeHandler.UpdateResourceType)
		resourceTypeRoutes.DELETE("/:frameworkId/:id", resourceTypeHandler.DeleteResourceType)
	}

	// 역할 - CSP 역할 매핑 라우트 (Level 3: 특정 권한 필요)
	cspMappingRoutes := api.Group("/workspace-roles/:roleId/csp-role-mappings", middleware.AuthMiddleware, middleware.PermissionMiddleware(db, middleware.Level3, "mc-iam-manager:csp-role:manage"))
	{
		cspMappingRoutes.POST("", cspMappingHandler.CreateCspRoleMapping)
		cspMappingRoutes.GET("", cspMappingHandler.ListCspRoleMappingsByRole)
		cspMappingRoutes.PUT("/:cspType/:cspRoleArn", cspMappingHandler.UpdateCspRoleMapping)
		cspMappingRoutes.DELETE("/:cspType/:cspRoleArn", cspMappingHandler.DeleteCspRoleMapping)
	}

	// CSP 임시 자격 증명 발급 API 라우트 (Level 3: 특정 권한 필요)
	cspCredentialRoutes := api.Group("/csp", middleware.AuthMiddleware, middleware.PermissionMiddleware(db, middleware.Level3, "mc-iam-manager:csp-credential:manage"))
	{
		cspCredentialRoutes.POST("/credentials", cspCredentialHandler.GetTemporaryCredentials)
	}

	// 초기 설정 엔드포인트
	e.POST("/api/admin/setup", func(c echo.Context) error {
		ctx := context.Background()
		err := keycloakService.SetupInitialAdmin(ctx)
		if err != nil {
			return c.JSON(http.StatusInternalServerError, map[string]string{
				"error": err.Error(),
			})
		}
		return c.JSON(http.StatusOK, map[string]string{
			"message": "Initial setup completed successfully",
		})
	})

	// Swagger 라우트 추가
	e.GET("/swagger/*", echoSwagger.WrapHandler)

	// 서버 시작
	go func() {
		if err := e.Start(":3000"); err != nil && err != http.ErrServerClosed {
			e.Logger.Fatal("shutting down the server")
		}
	}()

	// Graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	if err := e.Shutdown(ctx); err != nil {
		e.Logger.Fatal(err)
	}
}
