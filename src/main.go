package main

import (
	"context"
	"io"
	"log"
	"net/http"
	"os"
	"os/signal"
	"path/filepath"
	"strings"
	"syscall"
	"time"

	"github.com/go-playground/validator/v10"
	"github.com/joho/godotenv"
	"github.com/labstack/echo/v4"
	echomiddleware "github.com/labstack/echo/v4/middleware"
	"github.com/m-cmp/mc-iam-manager/config"
	"github.com/m-cmp/mc-iam-manager/handler"
	"github.com/m-cmp/mc-iam-manager/middleware"
	"github.com/m-cmp/mc-iam-manager/util"

	// "github.com/m-cmp/mc-iam-manager/repository" // Removed unused import

	// Ensure YAML is imported
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"

	_ "github.com/m-cmp/mc-iam-manager/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/m-cmp/mc-iam-manager/model"
	"github.com/m-cmp/mc-iam-manager/model/mcmpapi"
	echoSwagger "github.com/swaggo/echo-swagger"
)

// @title MC IAM Manager API
// @version 1.0
// @description MC IAM Manager API Documentation
// @host localhost:3000
// @BasePath /api/v1
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.
func main() {
	// Load environment variables from .env file
	err := godotenv.Load()
	if err != nil {
		log.Printf("Warning: Error loading .env file: %v", err)
		// .env 파일이 없어도 계속 진행 (환경 변수에서 직접 설정 가능)
	}

	// 로그 파일 설정
	logPath := filepath.Join("..", "app.log")
	logFile, err := os.OpenFile(logPath, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
	if err != nil {
		log.Fatalf("Failed to open log file: %v", err)
	}
	defer logFile.Close()

	// 로그 출력을 파일과 터미널 모두에 설정
	multiWriter := io.MultiWriter(os.Stdout, logFile)
	log.SetOutput(multiWriter)
	log.SetFlags(log.Ldate | log.Ltime | log.Lshortfile)

	// 시작 로그 추가
	log.Printf("=== Application Starting ===")

	// .env 파일 로드 (프로젝트 루트에서 찾도록 수정)
	util.LoadEnvFiles()

	// 데이터베이스 초기화
	dbConfig := config.NewDatabaseConfig()
	db, err := gorm.Open(postgres.Open(dbConfig.GetDSN()), &gorm.Config{
		Logger: logger.Default.LogMode(logger.Info),
		// Logger: logger.New(
		// 	log.New(os.Stdout, "\r\n", log.LstdFlags),
		// 	logger.Config{
		// 		SlowThreshold:             time.Second, // Slow SQL threshold
		// 		LogLevel:                  logger.Info, // Log level
		// 		IgnoreRecordNotFoundError: true,        // Ignore ErrRecordNotFound error for logger
		// 		Colorful:                  true,        // Enable color
		// 		ParameterizedQueries:      true,        // Don't include params in the SQL log
		// 	},
		// ),
	})
	if err != nil {
		log.Fatalf("Failed to initialize database: %v", err)
	}

	// 데이터베이스 마이그레이션 실행
	if err := db.AutoMigrate(
		&model.User{},
		&model.RoleMaster{},
		&model.RoleSub{},
		&model.Workspace{},
		&model.Project{},
		&model.Menu{},
		&model.ResourceType{},
		&model.UserPlatformRole{},
		&model.UserWorkspaceRole{},
		&model.RoleMasterCspRoleMapping{},
		&model.TempCredential{},
		&mcmpapi.McmpApiService{},
		&mcmpapi.McmpApiAction{},
	); err != nil {
		log.Fatalf("Failed to migrate database: %v", err)
	}

	// Keycloak 초기화
	if err := config.InitKeycloak(); err != nil {
		log.Fatalf("Failed to initialize Keycloak: %v", err)
	}

	// 핸들러 초기화
	authHandler := handler.NewAuthHandler(db)
	adminHandler := handler.NewAdminHandler(db)
	userHandler := handler.NewUserHandler(db)
	menuHandler := handler.NewMenuHandler(db)
	workspaceHandler := handler.NewWorkspaceHandler(db)

	projectHandler := handler.NewProjectHandler(db)

	resourceTypeHandler := handler.NewResourceTypeHandler(db)
	cspCredentialHandler := handler.NewCspCredentialHandler(db)
	mcmpApiHandler := handler.NewMcmpApiHandler(db)
	mcmpApiPermissionActionMappingHandler := handler.NewMcmpApiPermissionActionMappingHandler(db)
	healthHandler := handler.NewHealthHandler()
	permissionHandler := handler.NewMciamPermissionHandler(db)
	roleHandler := handler.NewRoleHandler(db)

	// Echo 인스턴스 생성
	e := echo.New()

	// Validator 설정
	e.Validator = &CustomValidator{validator: validator.New()}

	// 로그 레벨 설정
	e.Debug = true

	// 미들웨어 설정
	e.Use(echomiddleware.LoggerWithConfig(echomiddleware.LoggerConfig{
		Format: "[${time_rfc3339}] ${level} ${method} ${uri} ${status} ${latency_human}\n",
		Output: os.Stdout,
	}))
	e.Use(echomiddleware.Recover())
	e.Use(echomiddleware.CORS())

	basePath := "/api"

	// 인증이 필요없는 경로 목록
	skipAuthPaths := []string{
		"/readyz",
		"/initial-admin",
		basePath + "/auth/login",
		basePath + "/auth/logout",
		basePath + "/auth/refresh",
		basePath + "/auth/certs", // 인증서 조회 경로 추가

	}

	// 인증 미들웨어 설정
	e.Use(func(next echo.HandlerFunc) echo.HandlerFunc {
		return func(c echo.Context) error {
			path := c.Request().URL.Path
			//c.Logger().Debugf("Checking auth skip for path: %s", path)

			for _, skipPath := range skipAuthPaths {
				// 정확한 경로 일치 또는 path가 skipPath로 끝나는 경우
				if path == skipPath || strings.HasSuffix(path, skipPath) {
					//c.Logger().Debugf("Skipping auth for path: %s (matches skipPath: %s)", path, skipPath)
					return next(c)
				}
			}

			//c.Logger().Debugf("Applying auth middleware for path: %s", path)
			// 인증 미들웨어 적용
			return middleware.AuthMiddleware(next)(c)
		}
	})

	// 라우트 설정
	e.GET("/readyz", healthHandler.CheckHealth)

	api := e.Group(basePath)

	// 인증 라우트
	auth := api.Group("/auth")
	{
		auth.POST("/login", authHandler.Login)
		auth.POST("/logout", authHandler.Logout)
		auth.POST("/refresh", authHandler.RefreshToken)
		auth.GET("/certs", authHandler.AuthCerts)
	}

	// platform admin 생성. 권한체크 필요한데...
	api.POST("/initial-admin", adminHandler.SetupInitialAdmin) // TODO : 초기 설정에서 직접 keycloak 호출하는 것으로 바꿔야 할 듯.

	// 관리자 setup 라우트
	setup := api.Group("/setup", middleware.PlatformAdminMiddleware)
	{
		setup.GET("/check-user-roles", adminHandler.CheckUserRoles)
		setup.POST("/sync-projects", projectHandler.SyncProjects)
		setup.POST("/sync-mcmp-apis", mcmpApiHandler.SyncMcmpAPIs)
		setup.POST("/initial-menu", menuHandler.RegisterMenusFromYAML, middleware.PlatformAdminMiddleware)
		setup.POST("/initial-menu2", menuHandler.RegisterMenusFromBody, middleware.PlatformAdminMiddleware)
		setup.GET("/initial-role-menu-permission", adminHandler.InitializeMenuPermissions, middleware.PlatformAdminMiddleware)
	}

	// 워크스페이스 라우트
	workspaces := api.Group("/workspaces")
	{
		workspaces.POST("/list", workspaceHandler.ListWorkspaces) // workspace 목록만 조회. 전체조회 권한이 있으면 모든 workspaces, 그 외에는 세션의 유저에 해당하는 workspaces 조회
		workspaces.POST("", workspaceHandler.CreateWorkspace)
		workspaces.GET("/id/:workspaceId", workspaceHandler.GetWorkspaceByID)
		workspaces.GET("/name/:workspaceName", workspaceHandler.GetWorkspaceByName)
		workspaces.PUT("/id/:workspaceId", workspaceHandler.UpdateWorkspace, middleware.WorkspaceRoleMiddleware(db))
		workspaces.DELETE("/id/:workspaceId", workspaceHandler.DeleteWorkspace, middleware.WorkspaceRoleMiddleware(db))

		workspaces.POST("/workspace-ticket", authHandler.WorkspaceTicket) // 1개 워크스페이스에 대한 티켓 설정
		workspaces.POST("/temporary-credentials", cspCredentialHandler.GetTemporaryCredentials)

		workspaces.POST("/users/list", workspaceHandler.ListWorkspaceUsers)                                                                    // workspace의 사용자 목록 조회
		workspaces.POST("/users-roles/list", workspaceHandler.ListWorkspaceUsersAndRoles, middleware.PlatformRoleMiddleware(middleware.Write)) // workspace와 사용자 및 role 조회

		workspaces.POST("/projects/list", workspaceHandler.ListWorkspaceProjects)
		//workspaces.POST("/id/:workspaceId/users", workspaceHandler.ListWorkspace)                                                    // TODO ListAllWorkspaceUsersAndRoles으로 대체 또는 통합 가능하지 않나?
		workspaces.GET("/id/:workspaceId/users/id/:userId", roleHandler.GetUserWorkspaceRoles, middleware.PlatformRoleMiddleware(middleware.Write)) // 특정 사용자에게 할당된 워크스페이스 역할 조회 ( 관리자가 사용자의 workspace role 조회) --> get을 post로 바꿀까?

		workspaces.POST("/assign/projects", workspaceHandler.AddProjectToWorkspace, middleware.PlatformAdminMiddleware)
		workspaces.DELETE("/unassign/projects", workspaceHandler.RemoveProjectFromWorkspace, middleware.PlatformAdminMiddleware)

	}

	// 프로젝트 라우트 : workspace ticket과 workspaceId가 있으면 됨.
	projects := api.Group("/projects")
	{
		projects.POST("/list", projectHandler.ListProjects)
		projects.POST("", projectHandler.CreateProject, middleware.PlatformRoleMiddleware(middleware.Manage)) // platformRole에서 관리자
		projects.GET("/id/:projectId", projectHandler.GetProjectByID)
		projects.GET("/name/:projectName", projectHandler.GetProjectByName)
		projects.PUT("/id/:projectId", projectHandler.UpdateProject, middleware.PlatformRoleMiddleware(middleware.Manage))
		projects.DELETE("/id/:projectId", projectHandler.DeleteProject, middleware.PlatformRoleMiddleware(middleware.Manage))

		projects.POST("/assign/workspaces", projectHandler.AddWorkspaceToProject, middleware.PlatformAdminMiddleware)
		projects.DELETE("/unassign/workspaces", projectHandler.RemoveWorkspaceFromProject, middleware.PlatformAdminMiddleware)
	}

	// 역할 관리 라우트
	roles := api.Group("/roles")
	{
		roles.POST("/list", roleHandler.ListRoles)
		roles.POST("", roleHandler.CreateRole, middleware.PlatformRoleMiddleware(middleware.Write))
		roles.GET("/id/:roleId", roleHandler.GetRoleByRoleID)
		roles.GET("/name/:roleName", roleHandler.GetRoleByRoleName)
		roles.PUT("/id/:roleId", roleHandler.UpdateRole, middleware.PlatformRoleMiddleware(middleware.Write))
		roles.DELETE("/id/:roleId", roleHandler.DeleteRole, middleware.PlatformRoleMiddleware(middleware.Write))

		roles.POST("/id/:roleId/assign", roleHandler.AssignRole, middleware.PlatformRoleMiddleware(middleware.Write))
		roles.DELETE("/id/:roleId/unassign", roleHandler.RemoveRole, middleware.PlatformRoleMiddleware(middleware.Write))

		//------ 기본은 roles 관리로 되나. role관련은 특정 업무에 맞게 추가 ------//

		// 사용자에게 플랫폼 역할 할당
		roles.POST("/assign/platform-role", roleHandler.AssignPlatformRole, middleware.PlatformRoleMiddleware(middleware.Write))
		roles.DELETE("/unassign/platform-role", roleHandler.RemovePlatformRole, middleware.PlatformRoleMiddleware(middleware.Write))
		// 사용자에게 워크스페이스 역할 할당
		roles.POST("/assign/workspace-role", roleHandler.AssignWorkspaceRole, middleware.PlatformRoleMiddleware(middleware.Write))
		roles.DELETE("/unassign/workspace-role", roleHandler.RemoveWorkspaceRole, middleware.PlatformRoleMiddleware(middleware.Write))

		// csp role 매핑 관리
		roles.POST("/csp-roles", roleHandler.AddCspRoleMappings, middleware.PlatformRoleMiddleware(middleware.Manage))
		roles.DELETE("/csp-roles", roleHandler.RemoveCspRoleMappings, middleware.PlatformRoleMiddleware(middleware.Manage))

		//roles.GET("/id/:workspaceRoleId/csp-roles", roleHandler.ListCspRoleMappings, middleware.PlatformRoleMiddleware(middleware.Write))

		roles.POST("/platform-roles/list", roleHandler.ListPlatformRoles)
		roles.POST("/platform-roles", roleHandler.CreatePlatformRole)
		//roles.DELETE("/platform-roles", roleHandler.DeletePlatformRole)
		roles.DELETE("/platform-roles/id/:roleId", roleHandler.DeletePlatformRole) //단건삭제
		roles.GET("/platform-roles/id/:roleId", roleHandler.GetPlatformRoleByID)
		roles.GET("/platform-roles/name/:roleName", roleHandler.GetPlatformRoleByName)

		roles.POST("/workspace-roles/list", roleHandler.ListWorkspaceRoles)
		roles.POST("/workspace-roles", roleHandler.CreateWorkspaceRole)
		//roles.DELETE("/workspace-roles", roleHandler.DeleteWorkspaceRole)
		roles.DELETE("/workspace-roles/id/:roleId", roleHandler.DeleteWorkspaceRole) //단건삭제
		roles.GET("/workspace-roles/id/:roleId", roleHandler.GetWorkspaceRoleByID)
		roles.GET("/workspace-roles/name/:roleName", roleHandler.GetWorkspaceRoleByName)

		roles.POST("/csp-roles/list", roleHandler.ListCspRoleMappings)
		roles.GET("/csp-roles/id/:roleId", roleHandler.GetCspRoleMappings)
		roles.POST("/csp/list", roleHandler.ListCSPRoles)
		roles.POST("/csp", roleHandler.CreateCspRole)
		roles.POST("/csp/batch", roleHandler.CreateCspRoles)
		//roles.DELETE("/csp", roleHandler.DeleteCspRole)
		roles.DELETE("/csp/id/:roleId", roleHandler.DeleteCspRole) //단건삭제
		roles.GET("/csp/id/:roleId", roleHandler.GetCspRoleByID)
		roles.GET("/csp/name/:roleName", roleHandler.GetCspRoleByName)

		roles.POST("/mappings/list", roleHandler.ListRoleMasterMappings)
		roles.GET("/mappings/role/id/:roleId", roleHandler.GetRoleMasterMappings)
		roles.POST("/mappings/platform-roles/users/list", roleHandler.ListUsersByPlatformRole)
		roles.POST("/mappings/workspace-roles/users/list", roleHandler.ListUsersByWorkspaceRole)
		roles.POST("/mappings/csp-roles/list", roleHandler.ListRoleMasterMappingsByCspRole)

		//old begin
		// roles.GET("/csp-roles/all", cspRoleHandler.GetAllCSPRoles)
		// roles.GET("/csp-roles", cspRoleHandler.GetMciamCSPRoles)
		// roles.POST("/csp-roles", cspRoleHandler.CreateCSPRole)
		// roles.PUT("/csp-roles/:cspRoleId", cspRoleHandler.UpdateCSPRole)
		// roles.DELETE("/csp-roles/:cspRoleId", cspRoleHandler.DeleteCSPRole)
		// roles.POST("/:cspRoleId/permissions", cspRoleHandler.AddPermissionsToCSPRole)
		// roles.DELETE("/:cspRoleId/permissions", cspRoleHandler.RemovePermissionsFromCSPRole)
		// roles.GET("/:cspRoleId/permissions", cspRoleHandler.GetCSPRolePermissions)

		// // 정책 관리 엔드포인트 추가
		// roles.GET("/csp-roles/:roleName/policies", cspRoleHandler.GetRolePolicies)
		// roles.GET("/csp-roles/:roleName/policies/:policyName", cspRoleHandler.GetRolePolicy)
		// roles.PUT("/csp-roles/:roleName/policies/:policyName", cspRoleHandler.PutRolePolicy)
		// roles.DELETE("/csp-roles/:roleName/policies/:policyName", cspRoleHandler.DeleteRolePolicy)
		//old end

		// TODO : csp role 에 permission 관리
		// roles.POST("/csp-roles/id/:roleId/permissions", roleHandler.AddPermissionsToCspRole)
		// roles.DELETE("/csp-roles/id/:roleId/permissions", roleHandler.RemovePermissionsFromCspRole)
		// roles.GET("/csp-roles/id/:roleId/permissions", roleHandler.GetCspRolePermissions)

		// workspace role 과 csp role 매핑 관리
		// 워크스페이스 역할 - CSP 역할 매핑 라우트
		// workspaceRoles := api.Group("/workspace-roles")
		// {
		// }
		// workspaceRoles.GET("/:workspaceRoleId/csp-roles", cspMappingHandler.GetWorkspaceRoleCspRoleMappings)
		// workspaceRoles.POST("/:workspaceRoleId/csp-roles", cspMappingHandler.CreateWorkspaceRoleCspRoleMapping)
		// workspaceRoles.DELETE("/:workspaceRoleId/csp-roles/:cspType/:cspRoleId", cspMappingHandler.DeleteWorkspaceRoleCspRoleMapping)

		// roles.GET("/:workspaceRoleId/csp-roles", cspMappingHandler.GetWorkspaceRoleCspRoleMappings)
		// roles.POST("/:workspaceRoleId/csp-roles", cspMappingHandler.CreateWorkspaceRoleCspRoleMapping)
		// roles.DELETE("/:workspaceRoleId/csp-roles/:cspType/:cspRoleId", cspMappingHandler.DeleteWorkspaceRoleCspRoleMapping)
	}

	// 사용자 라우트
	users := api.Group("/users")
	{
		users.POST("/list", userHandler.ListUsers, middleware.PlatformRoleMiddleware(middleware.Read))
		users.POST("", userHandler.CreateUser, middleware.PlatformRoleMiddleware(middleware.Manage))
		users.GET("/id/:userId", userHandler.GetUserByID, middleware.PlatformRoleMiddleware(middleware.Read))
		users.GET("/name/:username", userHandler.GetUserByUsername, middleware.PlatformRoleMiddleware(middleware.Read))
		users.PUT("/id/:userId", userHandler.UpdateUser, middleware.PlatformRoleMiddleware(middleware.Manage))
		users.DELETE("/id/:userId", userHandler.DeleteUser, middleware.PlatformRoleMiddleware(middleware.Manage))
		users.POST("/id/:userId/status", userHandler.UpdateUserStatus, middleware.PlatformRoleMiddleware(middleware.Manage))

		users.POST("/menus-tree/list", menuHandler.ListUserMenuTree)
		users.POST("/menus/list", menuHandler.ListUserMenu)
		users.POST("/workspaces/list", userHandler.ListUserWorkspaces)
		users.GET("/workspaces/id/:workspaceId/projects/list", userHandler.ListUserProjectsByWorkspace)
		users.POST("/workspaces/roles/list", userHandler.ListUserWorkspaceAndWorkspaceRoles)

	}

	// 메뉴 라우트
	menusMng := api.Group("/menus")
	{
		menusMng.POST("/list", menuHandler.ListMenus)
		menusMng.POST("", menuHandler.CreateMenu, middleware.PlatformRoleMiddleware(middleware.Write))
		menusMng.PUT("/id/:menuId", menuHandler.UpdateMenu, middleware.PlatformAdminMiddleware)
		menusMng.DELETE("/id/:menuId", menuHandler.DeleteMenu, middleware.PlatformAdminMiddleware)

		//menusMng.POST("/platform-roles/list", menuHandler.ListMenusRolesMapping, middleware.PlatformRoleMiddleware(middleware.Manage))
		//menusMng.POST("/platform-roles/list", menuHandler.ListMenusRolesMapping)
		menusMng.POST("/platform-roles/list", menuHandler.ListMenusRolesMapping, middleware.PlatformRoleMiddleware(middleware.Write))
		// menusMng.POST("/platform-roles/list", menuHandler.ListMenusRolesMapping, middleware.PlatformAdminMiddleware)
		menusMng.POST("/platform-roles", menuHandler.CreateMenusRolesMapping, middleware.PlatformAdminMiddleware)
		menusMng.DELETE("/platform-roles", menuHandler.DeleteMenusRolesMapping, middleware.PlatformAdminMiddleware)
	}

	// // 관리자 전용 라우트
	// admin := api.Group("/admin", middleware.PlatformAdminMiddleware)
	// {
	// 	admin.GET("/workspaces", workspaceHandler.GetWorkspaces)
	// 	admin.POST("/createWorkspace", workspaceHandler.CreateWorkspace)
	// 	admin.PUT("/workspaces/:id", workspaceHandler.UpdateWorkspace)
	// 	admin.DELETE("/workspaces/:id", workspaceHandler.DeleteWorkspace)

	// 	admin.GET("/projects", projectHandler.ListProjects)
	// 	admin.GET("/projects/:id", projectHandler.GetProjectByID)
	// 	admin.POST("/createProject", projectHandler.CreateProject)
	// 	admin.PUT("/projects/:id", projectHandler.UpdateProject)
	// 	admin.DELETE("/projects/:id", projectHandler.DeleteProject)

	// 	admin.POST("/mcmp-api/list", mcmpApiHandler.ListServicesAndActions)
	// }

	// 리소스 타입 라우트 ( platformResource=menu,api , cloudResource=vm,nlb,k8s ...)
	resourceTypes := api.Group("/resource-types")
	{
		cloudResource := resourceTypes.Group("/cloud-resources", middleware.PlatformAdminMiddleware)
		cloudResource.POST("/list", resourceTypeHandler.ListCloudResourceTypes)
		cloudResource.POST("", resourceTypeHandler.CreateCloudResourceType)
		cloudResource.GET("/framework/:frameworkId/id/:resourceTypeId", resourceTypeHandler.GetCloudResourceTypeByID)
		cloudResource.PUT("/framework/:frameworkId/id/:resourceTypeId", resourceTypeHandler.UpdateResourceType)
		cloudResource.DELETE("/framework/:frameworkId/id/:resourceTypeId", resourceTypeHandler.DeleteResourceType)
	}

	// MC-IAM 권한 라우트
	mciamPermissions := api.Group("/permissions/mciam", middleware.PlatformRoleMiddleware(middleware.Read))
	{
		mciamPermissions.POST("/list", permissionHandler.ListMciamPermissions)
		mciamPermissions.POST("/createMciamPermission", permissionHandler.CreateMciamPermission, middleware.PlatformRoleMiddleware(middleware.Write))
		mciamPermissions.GET("/:id", permissionHandler.GetMciamPermissionByID)
		mciamPermissions.PUT("/:id", permissionHandler.UpdateMciamPermission, middleware.PlatformRoleMiddleware(middleware.Write))
		mciamPermissions.DELETE("/:id", permissionHandler.DeleteMciamPermission, middleware.PlatformRoleMiddleware(middleware.Write))
	}

	// MCMP API 라우트
	mcmpApis := api.Group("/mcmp-apis")
	{
		mcmpApis.POST("/list", mcmpApiHandler.ListServicesAndActions, middleware.PlatformRoleMiddleware(middleware.Manage))
		mcmpApis.PUT("/name/:serviceName/versions/:version/activate", mcmpApiHandler.SetActiveVersion, middleware.PlatformRoleMiddleware(middleware.Manage))
		mcmpApis.POST("/call", mcmpApiHandler.McmpApiCall, middleware.PlatformRoleMiddleware(middleware.Manage))
		mcmpApis.GET("/test/mc-infra-manager/getallns", mcmpApiHandler.TestCallGetAllNs, middleware.PlatformRoleMiddleware(middleware.Manage))
		mcmpApis.PUT("/name/:serviceName", mcmpApiHandler.UpdateFrameworkService, middleware.PlatformRoleMiddleware(middleware.Manage))
	}

	// MCMP API 권한-액션 매핑 라우트
	mcmpApiPermissionActionMappings := mcmpApis.Group("/permission-action-mappings")
	{
		mcmpApiPermissionActionMappings.POST("/list", mcmpApiPermissionActionMappingHandler.ListPlatformActions, middleware.PlatformRoleMiddleware(middleware.Read))
		mcmpApiPermissionActionMappings.GET("/id/:id", mcmpApiPermissionActionMappingHandler.GetPlatformActionsByPermissionID, middleware.PlatformRoleMiddleware(middleware.Read))
		mcmpApiPermissionActionMappings.POST("", mcmpApiPermissionActionMappingHandler.CreateMcmpApiPermissionActionMapping, middleware.PlatformRoleMiddleware(middleware.Manage))

		mcmpApiPermissionActionMappings.GET("/actions/list", mcmpApiPermissionActionMappingHandler.ListWorkspaceActionsByPermissionID, middleware.PlatformRoleMiddleware(middleware.Read))
		mcmpApiPermissionActionMappings.GET("/actions/:actionId/permissions", mcmpApiPermissionActionMappingHandler.ListPermissionsByActionID, middleware.PlatformRoleMiddleware(middleware.Read))
		mcmpApiPermissionActionMappings.PUT("/permissions/:permissionId/actions/:actionId", mcmpApiPermissionActionMappingHandler.UpdateMapping, middleware.PlatformRoleMiddleware(middleware.Manage))
		mcmpApiPermissionActionMappings.DELETE("/permissions/:permissionId/actions/:actionId", mcmpApiPermissionActionMappingHandler.DeleteMapping, middleware.PlatformRoleMiddleware(middleware.Manage))
	}

	// Swagger 문서 라우트
	e.GET("/swagger/*", echoSwagger.WrapHandler)

	// 서버 시작
	go func() {
		if err := e.Start(":3000"); err != nil && err != http.ErrServerClosed {
			e.Logger.Fatal("shutting down the server", err)
		}
	}()

	// Graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	if err := e.Shutdown(ctx); err != nil {
		e.Logger.Fatal(err)
	}
}

// CustomValidator 커스텀 validator 구조체
type CustomValidator struct {
	validator *validator.Validate
}

// Validate 구조체 검증 메서드
func (cv *CustomValidator) Validate(i interface{}) error {
	return cv.validator.Struct(i)
}
