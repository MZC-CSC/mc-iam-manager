package main

import (
	"context"
	"log"
	"net/http"
	"os"
	"os/signal"
	"path/filepath"
	"syscall"
	"time"

	"github.com/joho/godotenv"
	"github.com/labstack/echo/v4"
	echomiddleware "github.com/labstack/echo/v4/middleware"
	"github.com/m-cmp/mc-iam-manager/config"
	"github.com/m-cmp/mc-iam-manager/handler"
	"github.com/m-cmp/mc-iam-manager/middleware"

	// "github.com/m-cmp/mc-iam-manager/repository" // Removed unused import

	// Ensure YAML is imported
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"

	_ "github.com/m-cmp/mc-iam-manager/docs" // docs is generated by Swag CLI, you have to import it.
	echoSwagger "github.com/swaggo/echo-swagger"
)

// @title MC IAM Manager API
// @version 1.0
// @description MC IAM Manager API Documentation
// @host localhost:3000
// @BasePath /api/v1
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.
func main() {
	// .env 파일 로드 (프로젝트 루트에서 찾도록 수정)
	envPath := filepath.Join("..", ".env")
	if err := godotenv.Load(envPath); err != nil {
		log.Printf("Warning: .env 파일을 로드하는데 실패했습니다: %v", err)
	}

	// 데이터베이스 초기화
	dbConfig := config.NewDatabaseConfig()
	db, err := gorm.Open(postgres.Open(dbConfig.GetDSN()), &gorm.Config{
		Logger: logger.Default.LogMode(logger.Info),
	})
	if err != nil {
		log.Fatalf("Failed to initialize database: %v", err)
	}

	// Keycloak 초기화
	if err := config.InitKeycloak(); err != nil {
		log.Fatalf("Failed to initialize Keycloak: %v", err)
	}

	// 핸들러 초기화
	authHandler := handler.NewAuthHandler(db)
	adminHandler := handler.NewAdminHandler(db)
	userHandler := handler.NewUserHandler(db)
	menuHandler := handler.NewMenuHandler(db)
	workspaceHandler := handler.NewWorkspaceHandler(db)
	projectHandler := handler.NewProjectHandler(db)
	resourceTypeHandler := handler.NewResourceTypeHandler(db)
	cspMappingHandler := handler.NewCspMappingHandler(db)
	cspCredentialHandler := handler.NewCspCredentialHandler(db)
	cspRoleHandler := handler.NewCspRoleHandler()
	mcmpApiHandler := handler.NewMcmpApiHandler(db)
	mcmpApiPermissionActionMappingHandler := handler.NewMcmpApiPermissionActionMappingHandler(db)
	healthHandler := handler.NewHealthHandler()
	permissionHandler := handler.NewMciamPermissionHandler(db)
	platformRoleHandler := handler.NewPlatformRoleHandler(db)
	workspaceRoleHandler := handler.NewWorkspaceRoleHandler(db)

	// Echo 인스턴스 생성
	e := echo.New()

	// 로그 레벨 설정
	e.Debug = true

	// 미들웨어 설정
	e.Use(echomiddleware.Logger())
	e.Use(echomiddleware.Recover())
	e.Use(echomiddleware.CORS())

	// 인증이 필요하지 않은 경로 설정
	skipAuthPaths := []string{
		"/readyz",
		"/api/auth/login",
		"/api/auth/logout",
		"/api/auth/refresh",
	}

	// 인증 미들웨어 설정 (특정 경로 제외)
	e.Use(func(next echo.HandlerFunc) echo.HandlerFunc {
		return func(c echo.Context) error {
			path := c.Request().URL.Path
			for _, skipPath := range skipAuthPaths {
				if path == skipPath {
					return next(c)
				}
			}
			// 인증 미들웨어 적용
			return middleware.AuthMiddleware(next)(c)
		}
	})

	// 라우트 설정
	e.GET("/readyz", healthHandler.CheckHealth)

	api := e.Group("/api")

	// 인증 라우트
	auth := api.Group("/auth")
	{
		auth.POST("/login", authHandler.Login)
		auth.POST("/logout", authHandler.Logout)
		auth.POST("/refresh", authHandler.RefreshToken)
	}

	// 관리자 setup 라우트
	setup := api.Group("/setup", middleware.PlatformAdminMiddleware)
	{
		setup.POST("/user", adminHandler.SetupInitialAdmin)
		setup.GET("/check-roles", adminHandler.CheckUserRoles)
		setup.POST("/sync-projects", projectHandler.SyncProjects)
		setup.POST("/sync-apis", mcmpApiHandler.SyncMcmpAPIs)
		setup.POST("/sync-menu", menuHandler.RegisterMenusFromYAML, middleware.PlatformAdminMiddleware)
		// setup.POST("/menus/register-from-yaml", menuHandler.RegisterMenusFromYAML, middleware.PlatformAdminMiddleware)
		// setup.POST("/menus/register-from-body", menuHandler.RegisterMenusFromBody, middleware.PlatformAdminMiddleware)
	}

	// 관리자 전용 라우트
	admin := api.Group("/admin", middleware.PlatformAdminMiddleware)
	{
		admin.GET("/workspaces", workspaceHandler.GetAllWorkspaces)
		admin.POST("/workspaces", workspaceHandler.CreateWorkspace)
		admin.PUT("/workspaces/:id", workspaceHandler.UpdateWorkspace)
		admin.DELETE("/workspaces/:id", workspaceHandler.DeleteWorkspace)

		admin.GET("/projects", projectHandler.ListProjects)
		admin.GET("/projects/:id", projectHandler.GetProjectByID)
		admin.POST("/projects", projectHandler.CreateProject)
		admin.PUT("/projects/:id", projectHandler.UpdateProject)
		admin.DELETE("/projects/:id", projectHandler.DeleteProject)

		admin.GET("/mcmp-api", mcmpApiHandler.GetAllAPIDefinitions)

		admin.POST("/credentials", cspCredentialHandler.GetTemporaryCredentials)

	}

	// 플랫폼 역할 CRUD
	platformRoles := api.Group("/platform-roles", middleware.PlatformRoleMiddleware(middleware.Manage))
	{
		platformRoles.GET("", platformRoleHandler.List)
		platformRoles.POST("", platformRoleHandler.Create)
		platformRoles.GET("/:id", platformRoleHandler.GetByID)
		platformRoles.PUT("/:id", platformRoleHandler.Update)
		platformRoles.DELETE("/:id", platformRoleHandler.Delete)
	}

	// Workspace 역할 CRUD
	workspaceRoles := api.Group("/workspace-roles", middleware.PlatformRoleMiddleware(middleware.Manage))
	{
		workspaceRoles.GET("", workspaceRoleHandler.List)
		workspaceRoles.POST("", workspaceRoleHandler.Create)
		workspaceRoles.GET("/:id", workspaceRoleHandler.GetByID)
		workspaceRoles.PUT("/:id", workspaceRoleHandler.Update)
		workspaceRoles.DELETE("/:id", workspaceRoleHandler.Delete)
	}

	cspRoles := api.Group("/csp-roles", middleware.PlatformRoleMiddleware(middleware.Manage))
	{
		cspRoles.GET("/all", cspRoleHandler.GetAllCSPRoles)
		cspRoles.GET("", cspRoleHandler.GetCSPRoles)
		cspRoles.POST("", cspRoleHandler.CreateCSPRole)
		cspRoles.PUT("/:id", cspRoleHandler.UpdateCSPRole)
		cspRoles.DELETE("/:id", cspRoleHandler.DeleteCSPRole)
	}

	// 사용자 라우트
	users := api.Group("/users")
	{
		users.GET("", userHandler.GetUsers, middleware.PlatformRoleMiddleware(middleware.Read))
		users.GET("/id/:id", userHandler.GetUserByID, middleware.PlatformRoleMiddleware(middleware.Read))
		users.GET("/name/:username", userHandler.GetUserByUsername, middleware.PlatformRoleMiddleware(middleware.Read))
		users.POST("", userHandler.CreateUser, middleware.PlatformRoleMiddleware(middleware.Manage))
		users.PUT("/id/:id", userHandler.UpdateUser, middleware.PlatformRoleMiddleware(middleware.Manage))
		users.DELETE("/id/:id", userHandler.DeleteUser, middleware.PlatformRoleMiddleware(middleware.Manage))
		users.POST("/id/:id/approve", userHandler.ApproveUser, middleware.PlatformRoleMiddleware(middleware.Manage))

		users.GET("/menus", menuHandler.GetUserMenuTree)
		users.GET("/workspaces", userHandler.GetUserWorkspaceAndWorkspaceRoles)

		// 사용자에게 플랫폼 역할 할당
		users.POST("/assign/platform-roles", platformRoleHandler.AssignPlatformRoleToUser, middleware.PlatformRoleMiddleware(middleware.Manage))
		// 사용자에게 워크스페이스 역할 할당
		users.POST("/assign/workspace-roles", workspaceRoleHandler.AssignWorkspaceRoleToUser, middleware.PlatformRoleMiddleware(middleware.Manage))
	}

	// 메뉴 라우트
	menusMng := api.Group("/menus")
	{
		menusMng.GET("/", menuHandler.GetAllMenusTree)
		menusMng.POST("", menuHandler.Create, middleware.PlatformAdminMiddleware)
		menusMng.PUT("/:id", menuHandler.Update, middleware.PlatformAdminMiddleware)
		menusMng.DELETE("/:id", menuHandler.Delete, middleware.PlatformAdminMiddleware)

		menusMng.GET("/platform-roles/:role", menuHandler.GetMappedMenusByRole, middleware.PlatformAdminMiddleware)
		menusMng.POST("/platform-roles/:role/menus/:menuId", menuHandler.CreateMenuMapping, middleware.PlatformAdminMiddleware)
		menusMng.DELETE("/platform-roles/:role/menus/:menuId", menuHandler.DeleteMenuMapping, middleware.PlatformAdminMiddleware)
	}

	// 워크스페이스 라우트
	workspaces := api.Group("/workspaces")
	{
		workspaces.POST("/set", authHandler.WorkspaceTicket) // 1개 워크스페이스에 대한 티켓 설정

		workspaces.GET("", workspaceHandler.ListWorkspaces)
		workspaces.GET("/all", workspaceHandler.ListAllWorkspaces, middleware.PlatformRoleMiddleware(middleware.Manage))
		workspaces.GET("/userrole", workspaceHandler.ListAllWorkspaceUsersAndRoles, middleware.PlatformRoleMiddleware(middleware.Manage))
		workspaces.GET("/name/:workspaceName", workspaceHandler.GetWorkspaceByName)
		workspaces.GET("/id/:workspaceId", workspaceHandler.GetWorkspaceByID)
		workspaces.GET("/id/:workspaceId/projects", workspaceHandler.ListProjectsByWorkspace)
		workspaces.GET("/id/:workspaceId/users", workspaceHandler.ListUsersAndRolesByWorkspace)

		workspaces.POST("", workspaceHandler.CreateWorkspace)
		workspaces.PUT("/id/:workspaceId", workspaceHandler.UpdateWorkspace, middleware.WorkspaceRoleMiddleware(db))
		workspaces.DELETE("/id/:workspaceId", workspaceHandler.DeleteWorkspace, middleware.WorkspaceRoleMiddleware(db))
		workspaces.POST("/id/:workspaceId/projects/:projectId", workspaceHandler.AddProjectToWorkspace, middleware.WorkspaceRoleMiddleware(db))
		workspaces.DELETE("/id/:workspaceId/projects/:projectId", workspaceHandler.RemoveProjectFromWorkspace, middleware.WorkspaceRoleMiddleware(db))

		workspaces.POST("/id/:workspaceId/users/:username/roles/:workspaceRoleName", workspaceRoleHandler.AssignWorkspaceRoleToUser, middleware.PlatformRoleMiddleware(middleware.Write))
		workspaces.DELETE("/id/:workspaceId/users/:username/roles/:workspaceRoleName", workspaceRoleHandler.RemoveWorkspaceRoleFromUser, middleware.PlatformRoleMiddleware(middleware.Write))
		workspaces.GET("/id/:workspaceId/users/:username/roles", workspaceRoleHandler.GetUserWorkspaceRoles, middleware.PlatformRoleMiddleware(middleware.Read))
	}

	// 프로젝트 라우트 : workspace ticket과 workspaceId가 있으면 됨.
	projects := api.Group("/projects")
	{
		projects.GET("", projectHandler.ListProjects)
		projects.POST("", projectHandler.CreateProject, middleware.PlatformRoleMiddleware(middleware.Manage)) // platformRole에서 관리자
		projects.GET("/name/:name", projectHandler.GetProjectByName)
		projects.GET("/id/:id", projectHandler.GetProjectByID)
		projects.PUT("/id/:id", projectHandler.UpdateProject, middleware.PlatformRoleMiddleware(middleware.Manage))
		projects.DELETE("/id/:id", projectHandler.DeleteProject, middleware.PlatformRoleMiddleware(middleware.Manage))
		projects.POST("/id/:id/workspaces/:workspaceId", projectHandler.AddWorkspaceToProject, middleware.PlatformRoleMiddleware(middleware.Manage))
		projects.DELETE("/id/:id/workspaces/:workspaceId", projectHandler.RemoveWorkspaceFromProject, middleware.PlatformAdminMiddleware)
	}

	// 리소스 타입 라우트 ( platformResource=menu,api , cloudResource=vm,nlb,k8s ...)
	resourceTypes := api.Group("/resource-types")
	{
		cloudResource := resourceTypes.Group("/cloud-resources", middleware.PlatformAdminMiddleware)
		cloudResource.GET("", resourceTypeHandler.ListCloudResourceTypes)
		cloudResource.POST("", resourceTypeHandler.CreateCloudResourceType)
		cloudResource.GET("/framework/:frameworkId/id/:id", resourceTypeHandler.GetCloudResourceTypeByID)
		cloudResource.PUT("/framework/:frameworkId/id/:id", resourceTypeHandler.UpdateResourceType)
		cloudResource.DELETE("/framework/:frameworkId/id/:id", resourceTypeHandler.DeleteResourceType)
	}

	// CSP 역할 매핑 라우트
	cspRoleMappings := api.Group("/workspace-roles/:roleId/csp-role-mappings")
	{
		cspRoleMappings.GET("", cspMappingHandler.ListCspRoleMappingsByRole, middleware.PlatformRoleMiddleware(middleware.Manage))
		cspRoleMappings.POST("", cspMappingHandler.CreateCspRoleMapping, middleware.PlatformRoleMiddleware(middleware.Manage))
		cspRoleMappings.PUT("/:cspType/:cspRoleArn", cspMappingHandler.UpdateCspRoleMapping, middleware.PlatformRoleMiddleware(middleware.Manage))
		cspRoleMappings.DELETE("/:cspType/:cspRoleArn", cspMappingHandler.DeleteCspRoleMapping, middleware.PlatformRoleMiddleware(middleware.Manage))
	}

	// MC-IAM 권한 라우트
	mciamPermissions := api.Group("/mciam-permissions", middleware.PlatformRoleMiddleware(middleware.Manage))
	{
		mciamPermissions.GET("", permissionHandler.ListMciamPermissions)
		mciamPermissions.POST("", permissionHandler.CreateMciamPermission)
		mciamPermissions.GET("/:id", permissionHandler.GetMciamPermissionByID)
		mciamPermissions.PUT("/:id", permissionHandler.UpdateMciamPermission)
		mciamPermissions.DELETE("/:id", permissionHandler.DeleteMciamPermission)
	}

	// MCMP API 라우트
	mcmpApis := api.Group("/mcmp-apis")
	{
		mcmpApis.POST("/sync", mcmpApiHandler.SyncMcmpAPIs, middleware.PlatformRoleMiddleware(middleware.Manage)) // platformAdmin이 나을까?
		mcmpApis.PUT("/:serviceName/versions/:version/activate", mcmpApiHandler.SetActiveVersion, middleware.PlatformRoleMiddleware(middleware.Manage))
		mcmpApis.POST("/call", mcmpApiHandler.McmpApiCall, middleware.PlatformRoleMiddleware(middleware.Manage))
		mcmpApis.GET("/test/mc-infra-manager/getallns", mcmpApiHandler.TestCallGetAllNs, middleware.PlatformRoleMiddleware(middleware.Manage))
		mcmpApis.PUT("/:serviceName", mcmpApiHandler.UpdateService, middleware.PlatformRoleMiddleware(middleware.Manage))
	}

	// MCMP API 권한-액션 매핑 라우트
	mcmpApiPermissionActionMappings := mcmpApis.Group("/permission-action-mappings")
	{
		mcmpApiPermissionActionMappings.GET("/:id", mcmpApiPermissionActionMappingHandler.GetPlatformActionsByPermissionID, middleware.PlatformRoleMiddleware(middleware.Read))
		mcmpApiPermissionActionMappings.POST("", mcmpApiPermissionActionMappingHandler.CreateMapping, middleware.PlatformRoleMiddleware(middleware.Manage))

		mcmpApiPermissionActionMappings.GET("/:id", mcmpApiPermissionActionMappingHandler.GetWorkspaceActionsByPermissionID, middleware.PlatformRoleMiddleware(middleware.Read))
		mcmpApiPermissionActionMappings.GET("/actions/:actionId/permissions", mcmpApiPermissionActionMappingHandler.GetPermissionsByActionID, middleware.PlatformRoleMiddleware(middleware.Read))
		mcmpApiPermissionActionMappings.PUT("/permissions/:permissionId/actions/:actionId", mcmpApiPermissionActionMappingHandler.UpdateMapping, middleware.PlatformRoleMiddleware(middleware.Manage))
		mcmpApiPermissionActionMappings.DELETE("/permissions/:permissionId/actions/:actionId", mcmpApiPermissionActionMappingHandler.DeleteMapping, middleware.PlatformRoleMiddleware(middleware.Manage))
	}

	// Swagger 문서 라우트
	e.GET("/swagger/*", echoSwagger.WrapHandler)

	// 서버 시작
	go func() {
		if err := e.Start(":3000"); err != nil && err != http.ErrServerClosed {
			e.Logger.Fatal("shutting down the server", err)
		}
	}()

	// Graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	if err := e.Shutdown(ctx); err != nil {
		e.Logger.Fatal(err)
	}
}
