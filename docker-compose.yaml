x-default-health-check: &default-health-check
  interval: ${HEALTH_CHECK_INTERVAL}
  timeout: ${HEALTH_CHECK_TIMEOUT}
  retries: ${HEALTH_CHECK_RETIES}
  start_period: ${HEALTH_CHECK_START_PERIOD}

networks:
  mc-infra-connector-network:
  mc-infra-manager-network:
  mc-iam-manager-network:
  mc-web-console-network:

services:
  ##### MC-INFRA-CONNECTOR #########################################################################################################################

  mc-infra-connector:
    image: cloudbaristaorg/cb-spider:0.11.1
    pull_policy: missing
    container_name: mc-infra-connector
    platform: linux/amd64
    networks:
      - mc-infra-connector-network
      - mc-web-console-network
    ports:
      - target: 1024
        published: 1024
        protocol: tcp
    volumes:
      - ./tool/mcc:/app/tool/mcc
      - ./conf/mc-infra-connector/:/root/go/src/github.com/cloud-barista/cb-spider/conf/:ro
      - ./container-volume/mc-infra-connector/meta_db/:/root/go/src/github.com/cloud-barista/cb-spider/meta_db/
      - ./container-volume/mc-infra-connector/log/:/root/go/src/github.com/cloud-barista/cb-spider/log/
    environment:
      - PLUGIN_SW=OFF
      - SERVER_ADDRESS=0.0.0.0:1024
      # if you leave these values empty, REST Auth will be disabled.
      # - API_USERNAME=
      # - API_PASSWORD=
      - SPIDER_LOG_LEVEL=error
      - SPIDER_HISCALL_LOG_LEVEL=error
      - ID_TRANSFORM_MODE=OFF
    healthcheck:
      # for CB-Spider
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:1024/spider/readyz" ]
      <<: *default-health-check

  ##### MC-INFRA-MANAGER #########################################################################################################################

  mc-infra-manager:
    image: cloudbaristaorg/cb-tumblebug:0.11.1
    container_name: mc-infra-manager
    pull_policy: missing
    platform: linux/amd64
    networks:
      - mc-infra-connector-network
      - mc-infra-manager-network
      - mc-web-console-network
    ports:
      - target: 1323
        published: 1323
        protocol: tcp
    depends_on:
      mc-infra-manager-etcd:
        condition: service_started
      mc-infra-connector:
        condition: service_started
      mc-infra-manager-postgres:
        condition: service_healthy
    volumes:
      - ./tool/mcc:/app/tool/mcc
      - ./conf/mc-infra-manager/:/app/conf/:ro
      - ./container-volume/mc-infra-manager/meta_db/:/app/meta_db/
      - ./container-volume/mc-infra-manager/log/:/app/log/
    environment:
      # - TB_ROOT_PATH=/app
      - TB_SPIDER_REST_URL=http://mc-infra-connector:1024/spider
      - TB_ETCD_ENDPOINTS=http://mc-infra-manager-etcd:2379
      - TB_TERRARIUM_REST_URL=http://mc-terrarium:8055/terrarium
      - TB_IAM_MANAGER_REST_URL=http://mc-iam-manager:${MC_IAM_MANAGER_PORT}
      # - TB_ETCD_AUTH_ENABLED=true
      # - TB_ETCD_USERNAME=default
      # - TB_ETCD_PASSWORD=default
      - TB_POSTGRES_ENDPOINT=mc-infra-manager-postgres:5432
      - TB_POSTGRES_DATABASE=cb_tumblebug
      - TB_POSTGRES_USER=cb_tumblebug
      - TB_POSTGRES_PASSWORD=cb_tumblebug
      # - TB_ALLOW_ORIGINS=*
      # - TB_AUTH_ENABLED=true
      # - TB_API_USERNAME=default
      # - TB_API_PASSWORD=default
      # - TB_AUTOCONTROL_DURATION_MS=10000
      # - TB_SELF_ENDPOINT=localhost:1323
      # - TB_DRAGONFLY_REST_URL=http://cb-dragonfly:9090/dragonfly
      # - TB_DEFAULT_NAMESPACE=ns01
      # - TB_DEFAULT_CREDENTIALHOLDER=admin
      # - TB_LOGFILE_PATH=/app/log/tumblebug.log
      # - TB_LOGFILE_MAXSIZE=10
      # - TB_LOGFILE_MAXBACKUPS=3
      # - TB_LOGFILE_MAXAGE=30
      # - TB_LOGFILE_COMPRESS=false
      # - TB_LOGLEVEL=debug
      # - TB_LOGWRITER=both
      # - TB_NODE_ENV=development
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:1323/tumblebug/readyz" ]
      <<: *default-health-check

  mc-infra-manager-etcd:
    image: gcr.io/etcd-development/etcd:v3.5.14
    container_name: mc-infra-manager-etcd
    networks:
      - mc-infra-manager-network
    ports:
      - target: 2379
        published: 2379
        protocol: tcp
      - target: 2380
        published: 2380
        protocol: tcp
    volumes:
      - ./container-volume/mc-infra-manager/etcd/data:/etcd-data
    entrypoint: /usr/local/bin/etcd
    command:
      - --name
      - s1
      - --data-dir
      - /etcd-data
      - --listen-client-urls
      - http://0.0.0.0:2379
      - --advertise-client-urls
      - http://0.0.0.0:2379
      - --listen-peer-urls
      - http://0.0.0.0:2380
      - --initial-advertise-peer-urls
      - http://0.0.0.0:2380
      - --initial-cluster
      - s1=http://0.0.0.0:2380
      - --initial-cluster-token
      - tkn
      - --initial-cluster-state
      - new
      - --log-level
      - info
      - --logger
      - zap
      - --log-outputs
      - stderr
      - --auth-token
      - simple
    healthcheck:
      test: [ "CMD", "etcdctl", "endpoint", "health", "--endpoints=http://localhost:2379" ]
      <<: *default-health-check

  # mc-infra-manager PostgreSQL
  # This is used for storing CB-Tumblebug Spec and Image.
  mc-infra-manager-postgres:
    image: postgres:16-alpine
    container_name: mc-infra-manager-postgres
    restart: always
    networks:
      - mc-infra-manager-network
      # # Enable external network for outbound access (not ideal for security)
      # - external_network
    ports:
      - 6432:5432
    volumes:
      - ./container-volume/mc-infra-manager/meta_db/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=cb_tumblebug
      - POSTGRES_PASSWORD=cb_tumblebug
      - POSTGRES_DB=cb_tumblebug
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U cb_tumblebug" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  ##### MC-IAM-MANAGER #########################################################################################################################

  mc-iam-manager:
    #container_name: mc-iam-manager
    # Image configuration:
    # - For production: uses pre-built docker image (cloudbaristaorg/mc-iam-manager:edge)
    # - For development: uses local Dockerfile.mciammanager
    build:
      context: .
      dockerfile: Dockerfile.mciammanager
    image: cloudbaristaorg/mc-iam-manager:edge
    pull_policy: missing
    platform: linux/amd64
    restart: unless-stopped
    networks:
      - mc-iam-manager-network
      - mc-infra-manager-network
      - mc-web-console-network
    ports:
      - target: ${MC_IAM_MANAGER_PORT}
        published: ${MC_IAM_MANAGER_PORT}
        protocol: tcp
    depends_on:
      - mc-iam-manager-db
      - mc-iam-manager-kc
    environment:
      DATABASE_URL: postgres://${MC_IAM_MANAGER_DATABASE_USER}:${MC_IAM_MANAGER_DATABASE_PASSWORD}@${MC_IAM_MANAGER_DATABASE_HOST}:5432/${MC_IAM_MANAGER_DATABASE_NAME}
      PORT: ${MC_IAM_MANAGER_PORT}
    # Environment file configuration:
    # - For mc-iam-manager: uses project root .env file
    # - For mc-admin-cli: uses ./conf/mc-iam-manager/.env file
    # - For other services: uses ./conf/mc-iam-manager/.env file
    env_file:
      - ./.env
    volumes:
      - ./tool/mcc:/app/tool/mcc
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://${MC_IAM_MANAGER_DOMAIN}:${MC_IAM_MANAGER_PORT}/readyz" ]
      <<: *default-health-check

  mc-iam-manager-db:
    container_name: mc-iam-manager-db
    image: postgres:14-alpine
    pull_policy: missing
    platform: linux/amd64
    restart: unless-stopped
    networks:
      - mc-iam-manager-network
    ports:
      - target: 5432
        published: 5432
        protocol: tcp
    volumes:
      - ./container-volume/mc-iam-manager/postgres/postgres_data:/var/lib/postgresql/data
      - ./conf/mc-iam-manager/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    environment:
      POSTGRES_DB: ${MC_IAM_MANAGER_DATABASE_NAME}
      POSTGRES_USER: ${MC_IAM_MANAGER_DATABASE_USER}
      POSTGRES_PASSWORD: ${MC_IAM_MANAGER_DATABASE_PASSWORD}
    # Environment file configuration:
    # - For mc-iam-manager: uses project root .env file
    # - For mc-admin-cli: uses ./conf/mc-iam-manager/.env file
    # - For other services: uses ./conf/mc-iam-manager/.env file
    env_file:
      - ./.env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${MC_IAM_MANAGER_DATABASE_USER} -d ${MC_IAM_MANAGER_DATABASE_NAME}" ]
      <<: *default-health-check
    command: >
      sh -c "chown -R 70:70 /var/lib/postgresql/data &&
            exec docker-entrypoint.sh postgres"

  mc-iam-manager-kc:
    container_name: mc-iam-manager-kc
    image: quay.io/keycloak/keycloak:24.0.1
    restart: unless-stopped
    networks:
      - mc-iam-manager-network
    ports:
      - target: 8080
        published: 8080
        protocol: tcp
    command:
      - start-dev
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://mc-iam-manager-db:5432/${MC_IAM_MANAGER_KEYCLOAK_DATABASE_NAME}
      KC_DB_USERNAME: ${MC_IAM_MANAGER_DATABASE_USER}
      KC_DB_PASSWORD: ${MC_IAM_MANAGER_DATABASE_PASSWORD}
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HOSTNAME: localhost
      KEYCLOAK_ADMIN: ${MC_IAM_MANAGER_KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${MC_IAM_MANAGER_KEYCLOAK_ADMIN_PASSWORD:-admin_password}
      KC_HTTP_ENABLED: "true"
      KC_PROXY: edge
    volumes:
      - ./tool/mcc:/app/tool/mcc
      - ./container-volume/mc-iam-manager/keycloak/data/:/opt/keycloak/data/
    # Environment file configuration:
    # - For mc-iam-manager: uses project root .env file
    # - For mc-admin-cli: uses ./conf/mc-iam-manager/.env file
    # - For other services: uses ./conf/mc-iam-manager/.env file
    env_file:
      - ./.env  
    depends_on:
      - mc-iam-manager-db
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:8080/" ]
      # test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:8080/health/ready" ]
      <<: *default-health-check

  mc-iam-manager-nginx:
    image: nginx:1.25-alpine
    container_name: mc-iam-manager-nginx
    ports:
      - "80:80"
      - "443:443"
    environment:
      - DOMAIN_NAME=${MC_IAM_MANAGER_KEYCLOAK_DOMAIN}
    volumes:
      - ./container-volume/mc-iam-manager/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./container-volume/certs:/etc/nginx/certs:ro
      - ./container-volume/certbot/www:/var/www/certbot:ro
    depends_on:
      - mc-iam-manager-kc
    networks:
      - mc-iam-manager-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost/nginx-health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mc-iam-manager-post-initial:
    image: ubuntu:22.04
    container_name: mc-iam-manager-post-initial
    # restart: unless-stopped
    networks:
      - mc-iam-manager-network
    depends_on:
      mc-iam-manager:
        condition: service_healthy
      mc-iam-manager-db:
        condition: service_healthy
      mc-iam-manager-kc:
        condition: service_healthy
    # Environment file configuration:
    # - For mc-iam-manager: uses project root .env file
    # - For mc-admin-cli: uses ./conf/mc-iam-manager/.env file
    # - For other services: uses ./conf/mc-iam-manager/.env file
    env_file:
      - ./.env
    volumes:
      - ./tool/mcc:/app/tool/mcc
      - ./conf/mc-iam-manager/:/app/mc-iam-manager/
    working_dir: /app/mc-iam-manager
    command: bash /app/mc-iam-manager/docker-post-init.sh

  ##### MC-WEB-CONSOLE #########################################################################################################################

  mc-web-console-db:
    image: postgres:14-alpine
    container_name: mc-web-console-db
    restart: unless-stopped
    volumes:
      - ./container-volume/mc-web-console/postgres/postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${CONSOLE_POSTGRES_DB}
      POSTGRES_USER: ${CONSOLE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${CONSOLE_POSTGRES_PASSWORD}
    networks:
      - mc-web-console-network
    pull_policy: missing
    platform: linux/amd64
    ports:
      - target: 5432
        published: 15432
        protocol: tcp
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${CONSOLE_POSTGRES_USER}" ]
      <<: *default-health-check
    command: >
      sh -c "chown -R 70:70 /var/lib/postgresql/data &&
            exec docker-entrypoint.sh postgres"

  mc-web-console-api:
    # image: sehyeong0108/mc-web-console-api:20241101
    image: cloudbaristaorg/mc-web-console-api:edge
    container_name: mc-web-console-api
    platform: linux/amd64
    restart: unless-stopped
    depends_on:
      - mc-web-console-db
      - mc-infra-connector
      - mc-infra-manager
      - mc-iam-manager
      # - mc-observability-manager
      # - mc-workflow-manager
      # - mc-data-manager
      # - mc-application-manager
      # - mc-cost-optimizer-be
    ports:
      - target: 3000
        published: 3000
        protocol: tcp
    networks:
      - mc-web-console-network
      - mc-iam-manager-network
    environment:
      GO_ENV: development
      GODEBUG: netdns=go
      API_ADDR: "0.0.0.0"
      API_PORT: "3000"
      DATABASE_URL: postgres://${CONSOLE_POSTGRES_USER}:${CONSOLE_POSTGRES_PASSWORD}@mc-web-console-db:5432/${CONSOLE_POSTGRES_DB}
      MCIAM_USE: true
      MCIAM_TICKET_USE: false
      IFRAME_TARGET_IS_HOST: true
      MC_IAM_MANAGER_PORT: ${MC_IAM_MANAGER_PORT}
    volumes:
      - ./tool/mcc:/app/tool/mcc
      - ./conf/mc-web-console/api/conf/:/conf/
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:3000/readyz" ]
      <<: *default-health-check

  mc-web-console-front:
    # image: sehyeong0108/mc-web-console-front:20241101
    image: cloudbaristaorg/mc-web-console-front:0.4.1
    container_name: mc-web-console-front
    platform: linux/amd64
    restart: unless-stopped
    depends_on:
      - mc-web-console-api
    networks:
      - mc-web-console-network
      - mc-iam-manager-network
    ports:
      - target: 3001
        published: 3001
        protocol: tcp
    environment:
      API_ADDR: mc-web-console-api
      API_PORT: 3000
      FRONT_ADDR: 0.0.0.0
      FRONT_PORT: 3001
    volumes:
      - ./tool/mcc:/app/tool/mcc
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:3001" ]
      <<: *default-health-check 