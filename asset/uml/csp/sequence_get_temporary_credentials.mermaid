sequenceDiagram
    participant Client
    participant Router as main.go (Echo)
    participant AuthMiddleware as middleware.AuthMiddleware
    participant CspCredentialHandler as handler.CspCredentialHandler
    participant KeycloakService as service.KeycloakService
    participant CspCredentialService as service.CspCredentialService
    participant UserRepo as repository.UserRepository
    participant CspMappingRepo as repository.CspMappingRepository
    participant AwsCredentialService as service.AwsCredentialService
    participant AWS_STS

    Client->>+Router: POST /api/csp/credentials (Body: CspCredentialRequest, Header: Bearer OIDCToken)
    Router->>+AuthMiddleware: Verify Token
    AuthMiddleware-->>-Router: Token OK (Set Claims/kcUserId)
    Router->>+CspCredentialHandler: GetTemporaryCredentials(c)
    CspCredentialHandler->>CspCredentialHandler: Extract OIDC Token String
    CspCredentialHandler->>CspCredentialHandler: Bind Request Body
    CspCredentialHandler->>+KeycloakService: ValidateTokenAndGetClaims(ctx, oidcTokenString)
    KeycloakService-->>-CspCredentialHandler: Claims or Error
    CspCredentialHandler->>CspCredentialHandler: Extract kcUserId from Claims
    CspCredentialHandler->>+CspCredentialService: GetTemporaryCredentials(ctx, kcUserId, oidcTokenString, workspaceId, cspType) # Activate CspCredentialService
    CspCredentialService->>+UserRepo: FindByKcID(kcUserId)
    UserRepo-->>CspCredentialService: User (with DB ID) or Error # Return to CspCredentialService (still active)
    CspCredentialService->>+UserRepo: GetUserRolesInWorkspace(userId, workspaceId)
    UserRepo-->>CspCredentialService: UserWorkspaceRole List or Error # Return to CspCredentialService (still active)
    CspCredentialService->>CspCredentialService: Find First Matching CSP Mapping
    loop For Each User Role
        CspCredentialService->>+CspMappingRepo: FindByRoleAndCspType(roleId, cspType)
        CspMappingRepo-->>CspCredentialService: Mapping List or Error # Return to CspCredentialService (still active)
        alt Mapping Found
            CspCredentialService->>CspCredentialService: Break Loop (targetMapping found)
        end
    end
    alt No Mapping Found
        CspCredentialService-->>-CspCredentialHandler: Error (ErrNoCspRoleMappingFound) # Deactivate CspCredentialService
        CspCredentialHandler-->>-Router: 403 Forbidden
        Router-->>-Client: 403 Forbidden
    else Mapping Found
        alt cspType is "aws"
            CspCredentialService->>+AwsCredentialService: AssumeRoleWithWebIdentity(ctx, roleArn, kcUserId, oidcTokenString, idpArn)
            AwsCredentialService->>+AWS_STS: AssumeRoleWithWebIdentity API Call
            AWS_STS-->>-AwsCredentialService: STS Credentials or Error
            AwsCredentialService-->>CspCredentialService: CspCredentialResponse or Error # Return to CspCredentialService (still active)
        else Unsupported CSP Type
            CspCredentialService-->>-CspCredentialHandler: Error (ErrUnsupportedCspType) # Deactivate CspCredentialService
            CspCredentialHandler-->>-Router: 400 Bad Request
            Router-->>-Client: 400 Bad Request
        end
        %% Simplified final return paths (Only if AWS path was taken and successful/error returned to CspCredentialService)
        alt cspType is "aws" # Condition needed to ensure CspCredentialService is still active
             CspCredentialService-->>-CspCredentialHandler: CspCredentialResponse or Error # Deactivate CspCredentialService
             alt Error
                 CspCredentialHandler-->>-Router: 403/500 Error
                 Router-->>-Client: 403/500 Error
             else Success
                 CspCredentialHandler-->>-Router: 200 OK (Credentials)
                 Router-->>-Client: 200 OK (Credentials)
             end
        end
    end
            Router-->>-Client: 403/500 Error # Deactivates Router
        else Success
            CspCredentialHandler-->>-Router: 200 OK (Credentials) # Deactivates Handler, Activates Router
            Router-->>-Client: 200 OK (Credentials) # Deactivates Router
        end
    end
