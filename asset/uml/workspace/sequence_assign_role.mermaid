sequenceDiagram
    participant Client
    participant Router as main.go (Echo)
    participant AuthMiddleware as middleware.AuthMiddleware
    participant WorkspaceRoleHandler as handler.WorkspaceRoleHandler
    participant WorkspaceRoleService as service.WorkspaceRoleService
    participant UserRepo as repository.UserRepository
    participant WorkspaceRoleRepo as repository.WorkspaceRoleRepository
    participant KeycloakService as service.KeycloakService
    participant Keycloak

    Client->>+Router: POST /workspaces/{wsId}/users/{uId}/roles/{rId} (Header: Auth Token)
    Router->>+AuthMiddleware: Verify Token
    AuthMiddleware-->>-Router: Token OK
    Router->>+WorkspaceRoleHandler: AssignRoleToUser(c)
    WorkspaceRoleHandler->>WorkspaceRoleHandler: Parse IDs from path
    WorkspaceRoleHandler->>+WorkspaceRoleService: AssignRoleToUser(userId, roleId, workspaceId)
    %% Service Logic
    WorkspaceRoleService->>+UserRepo: FindByID(userId) # Check user exists
    UserRepo-->>-WorkspaceRoleService: User or Error
    WorkspaceRoleService->>+WorkspaceRoleRepo: GetByID(roleId) # Check role exists
    WorkspaceRoleRepo-->>-WorkspaceRoleService: Role or Error
    %% TODO: Check workspace exists? (Currently not in service logic)
    WorkspaceRoleService->>+WorkspaceRoleRepo: AssignRoleToUser(userId, roleId, workspaceId) # DB Insert
    WorkspaceRoleRepo-->>-WorkspaceRoleService: Success/Error (DB)
    alt DB Assign Success
        WorkspaceRoleService->>+UserRepo: FindByID(userId) # Get KcId
        UserRepo-->>-WorkspaceRoleService: User (with KcId)
        WorkspaceRoleService->>+WorkspaceRoleRepo: GetByID(roleId) # Get Role Name
        WorkspaceRoleRepo-->>-WorkspaceRoleService: Role (with Name)
        WorkspaceRoleService->>WorkspaceRoleService: Construct Keycloak Group Name (e.g., ws_wsId_roleName)
        WorkspaceRoleService->>+KeycloakService: EnsureGroupExistsAndAssignUser(ctx, user.KcId, groupName)
        KeycloakService->>+Keycloak: Find/Create Group & Assign User API Calls
        Keycloak-->>-KeycloakService: Success/Error
        KeycloakService-->>-WorkspaceRoleService: Success/Error (Log only)
    end
    WorkspaceRoleService-->>-WorkspaceRoleHandler: Success or Error
    alt Error Assigning Role
        WorkspaceRoleHandler-->>-Router: 404/409/500 Error
        Router-->>-Client: 404/409/500 Error
    else Success
        WorkspaceRoleHandler-->>-Router: 204 No Content
        Router-->>-Client: 204 No Content
    end
